{"file_contents":{"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar, Clock, MapPin, Mail, Phone, Church, BookOpen, Users } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Event } from \"@shared/schema\";\nimport heroImage from \"@assets/generated_images/Church_exterior_hero_image_d5bc8630.png\";\nimport worshipImage from \"@assets/generated_images/Worship_community_scene_64e8950f.png\";\nimport bibleStudyImage from \"@assets/generated_images/Bible_study_group_689038a0.png\";\nimport fellowshipImage from \"@assets/generated_images/Community_fellowship_event_1583deef.png\";\n\nexport default function Home() {\n  const { data: events = [], isLoading } = useQuery<Event[]>({\n    queryKey: [\"/api/events/public\"],\n  });\n\n  const upcomingEvents = events.slice(0, 3);\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 bg-background/95 backdrop-blur border-b\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Church className=\"w-8 h-8 text-primary\" />\n            <div>\n              <h1 className=\"font-sans text-xl font-semibold text-foreground\">Comunidade Eclesia</h1>\n              <p className=\"text-xs text-muted-foreground\">Uma casa para todos</p>\n            </div>\n          </div>\n          <nav className=\"hidden md:flex items-center gap-8\">\n            <a href=\"#sobre\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-lg transition-colors\" data-testid=\"link-sobre\">\n              Sobre\n            </a>\n            <a href=\"#cultos\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-lg transition-colors\" data-testid=\"link-cultos\">\n              Cultos\n            </a>\n            <a href=\"#eventos\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-lg transition-colors\" data-testid=\"link-eventos\">\n              Eventos\n            </a>\n            <a href=\"#contato\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-lg transition-colors\" data-testid=\"link-contato\">\n              Contato\n            </a>\n          </nav>\n          <Link href=\"/login\">\n            <Button data-testid=\"button-member-area\">Área do Membro</Button>\n          </Link>\n        </div>\n      </header>\n      {/* Hero Section */}\n      <section className=\"relative h-[85vh] flex items-center justify-center overflow-hidden\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center\"\n          style={{ backgroundImage: `url(${heroImage})` }}\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-b from-black/60 via-black/40 to-black/60\" />\n        </div>\n        <div className=\"relative z-10 text-center px-6 max-w-4xl\">\n          <h2 className=\"font-sans text-5xl md:text-6xl font-bold text-white mb-6\" data-testid=\"text-hero-title\">\n            Bem-vindo à nossa comunidade\n          </h2>\n          <p className=\"text-xl md:text-2xl text-white/90 mb-8\" data-testid=\"text-hero-subtitle\">\n            Um lugar de fé, esperança e amor para toda a família\n          </p>\n          <div className=\"flex flex-wrap gap-4 justify-center\">\n            <Link href=\"/login\">\n              <Button size=\"lg\" className=\"backdrop-blur-md bg-primary/90 hover:bg-primary border border-primary-border\" data-testid=\"button-hero-visit\">\n                Área do Membro\n              </Button>\n            </Link>\n            <Button size=\"lg\" variant=\"outline\" className=\"backdrop-blur-md bg-background/10 hover:bg-background/20 text-white border-white/30\" data-testid=\"button-hero-contact\">\n              <a href=\"#contato\">Entre em Contato</a>\n            </Button>\n          </div>\n        </div>\n      </section>\n      {/* About Section */}\n      <section id=\"sobre\" className=\"py-20 px-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h3 className=\"font-sans text-4xl font-semibold mb-6 text-foreground\" data-testid=\"text-about-title\">\n                Sobre Nós\n              </h3>\n              <p className=\"text-lg text-foreground/80 mb-4\">\n                Somos uma comunidade cristã comprometida com o ensino da Palavra de Deus e o cuidado com as pessoas. Nossa missão é criar um ambiente acolhedor onde cada pessoa possa crescer em sua fé e desenvolver relacionamentos significativos.\n              </p>\n              <p className=\"text-lg text-foreground/80 mb-6\">\n                Há mais de 20 anos servindo a comunidade com amor, dedicação e excelência no ministério. Oferecemos cultos, estudos bíblicos, grupos de comunhão e diversos ministérios para todas as idades.\n              </p>\n              <div className=\"flex flex-wrap gap-4\">\n                <div className=\"flex items-center gap-2 text-primary\">\n                  <Users className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Comunidade Ativa</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-primary\">\n                  <BookOpen className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Ensino Bíblico</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <img src={worshipImage} alt=\"Culto de adoração\" className=\"rounded-lg shadow-lg w-full h-48 object-cover\" />\n              <img src={bibleStudyImage} alt=\"Estudo bíblico\" className=\"rounded-lg shadow-lg w-full h-48 object-cover mt-8\" />\n              <img src={fellowshipImage} alt=\"Comunhão\" className=\"rounded-lg shadow-lg w-full h-48 object-cover col-span-2\" />\n            </div>\n          </div>\n        </div>\n      </section>\n      {/* Worship Schedule */}\n      <section id=\"cultos\" className=\"py-20 px-6 bg-card\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"font-sans text-4xl font-semibold mb-4 text-foreground\" data-testid=\"text-schedule-title\">\n              Dias de Culto\n            </h3>\n            <p className=\"text-lg text-muted-foreground\">Venha nos visitar e fazer parte da nossa família</p>\n          </div>\n          <div className=\"grid md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n            <Card className=\"hover-elevate\" data-testid=\"card-schedule-wednesday\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <div className=\"p-3 rounded-lg bg-primary/10\">\n                    <Calendar className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-2xl\">Quarta-feira</CardTitle>\n                </div>\n                <CardDescription className=\"text-lg\">Culto de Ensino</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Clock className=\"w-4 h-4\" />\n                  <span>19:30 - 21:00</span>\n                </div>\n                <p className=\"mt-3 text-foreground/70\">\n                  Uma noite dedicada ao estudo aprofundado da Palavra de Deus.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate\" data-testid=\"card-schedule-sunday\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <div className=\"p-3 rounded-lg bg-gold/20\">\n                    <Calendar className=\"w-6 h-6 text-gold\" />\n                  </div>\n                  <CardTitle className=\"text-2xl\">Domingo</CardTitle>\n                </div>\n                <CardDescription className=\"text-lg\">Culto da Família</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Clock className=\"w-4 h-4\" />\n                  <span>10:00 - 12:00 e 18:00 - 20:00</span>\n                </div>\n                <p className=\"mt-3 text-foreground/70\">\n                  Celebração com toda a família em adoração e comunhão.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n      {/* Events Section */}\n      <section id=\"eventos\" className=\"py-20 px-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"font-sans text-4xl font-semibold mb-4 text-foreground\" data-testid=\"text-events-title\">\n              Próximos Eventos\n            </h3>\n            <p className=\"text-lg text-muted-foreground\">Confira as atividades que estamos preparando</p>\n          </div>\n          {isLoading ? (\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <div className=\"h-48 bg-muted animate-pulse\" />\n                  <CardHeader>\n                    <div className=\"h-6 bg-muted animate-pulse rounded mb-2\" />\n                    <div className=\"h-4 bg-muted animate-pulse rounded w-2/3\" />\n                  </CardHeader>\n                </Card>\n              ))}\n            </div>\n          ) : upcomingEvents.length > 0 ? (\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {upcomingEvents.map((event) => (\n                <Card key={event.id} className=\"overflow-hidden hover-elevate\" data-testid={`card-event-${event.id}`}>\n                  {event.imagem && (\n                    <div className=\"h-48 overflow-hidden\">\n                      <img src={event.imagem} alt={event.titulo} className=\"w-full h-full object-cover\" />\n                    </div>\n                  )}\n                  <CardHeader>\n                    <CardTitle className=\"text-xl\">{event.titulo}</CardTitle>\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Calendar className=\"w-4 h-4\" />\n                      <span>{new Date(event.data).toLocaleDateString('pt-BR')}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <MapPin className=\"w-4 h-4\" />\n                      <span>{event.local}</span>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-foreground/70\">{event.descricao}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"w-16 h-16 mx-auto text-muted-foreground/50 mb-4\" />\n              <p className=\"text-lg text-muted-foreground\">Nenhum evento programado no momento</p>\n            </div>\n          )}\n        </div>\n      </section>\n      {/* Contact Section */}\n      <section id=\"contato\" className=\"py-20 px-6 bg-card\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"font-sans text-4xl font-semibold mb-4 text-foreground\" data-testid=\"text-contact-title\">\n              Entre em Contato\n            </h3>\n            <p className=\"text-lg text-muted-foreground\">Estamos aqui para você</p>\n          </div>\n          <div className=\"grid md:grid-cols-2 gap-12\">\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <MapPin className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-lg mb-1\">Endereço</h4>\n                  <p className=\"text-foreground/70\">Rua da Fé, 123 - Centro<br />São Paulo, SP - CEP 01234-567</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <Phone className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-lg mb-1\">Telefone</h4>\n                  <p className=\"text-foreground/70\">(11) 1234-5678</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <Mail className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-lg mb-1\">Email</h4>\n                  <p className=\"text-foreground/70\">contato@igrejacomunidade.com.br</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"h-96 rounded-lg overflow-hidden border\">\n              <iframe\n                src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3657.1975988974395!2d-46.65450892464942!3d-23.561414278795984!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x94ce59c8da0aa315%3A0xd59f9431f2c9776a!2sSão%20Paulo%2C%20SP!5e0!3m2!1spt-BR!2sbr!4v1234567890123!5m2!1spt-BR!2sbr\"\n                width=\"100%\"\n                height=\"100%\"\n                style={{ border: 0 }}\n                allowFullScreen\n                loading=\"lazy\"\n                referrerPolicy=\"no-referrer-when-downgrade\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n      {/* Footer */}\n      <footer className=\"bg-foreground/5 border-t py-8 px-6\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <Church className=\"w-6 h-6 text-primary\" />\n            <span className=\"font-sans font-semibold text-lg\">Igreja Comunidade</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            © {new Date().getFullYear()} Igreja Comunidade. Todos os direitos reservados.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":14250},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, date, integer, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - members and admins\nexport const users = pgTable(\"users\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  nome: text(\"nome\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  senha: text(\"senha\").notNull(),\n  dataNascimento: date(\"data_nascimento\"),\n  profissao: text(\"profissao\"),\n  endereco: text(\"endereco\"),\n  bairro: text(\"bairro\"),\n  cidade: text(\"cidade\"),\n  ministerio: text(\"ministerio\"), // Louvor, Obreiros, Infantil, etc\n  isAdmin: boolean(\"is_admin\").notNull().default(false),\n  isLider: boolean(\"is_lider\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  titulo: text(\"titulo\").notNull(),\n  descricao: text(\"descricao\").notNull(),\n  data: date(\"data\").notNull(),\n  local: text(\"local\").notNull(),\n  imagem: text(\"imagem\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  nome: text(\"nome\").notNull(),\n  descricao: text(\"descricao\").notNull(),\n  imagem: text(\"imagem\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Lessons table (aulas)\nexport const lessons = pgTable(\"lessons\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  cursoId: integer(\"curso_id\").notNull().references(() => courses.id, { onDelete: \"cascade\" }),\n  titulo: text(\"titulo\").notNull(),\n  descricao: text(\"descricao\").notNull(),\n  videoUrl: text(\"video_url\").notNull(),\n  ordem: integer(\"ordem\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Materials table (apostilas)\nexport const materials = pgTable(\"materials\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  titulo: text(\"titulo\").notNull(),\n  descricao: text(\"descricao\"),\n  arquivoUrl: text(\"arquivo_url\").notNull(),\n  tipo: text(\"tipo\").notNull().default(\"pdf\"), // pdf or video\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Prayer requests table\nexport const prayerRequests = pgTable(\"prayer_requests\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  nome: text(\"nome\").notNull(),\n  email: text(\"email\"),\n  pedido: text(\"pedido\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, archived\n  isPublic: boolean(\"is_public\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  userId: integer(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  titulo: text(\"titulo\").notNull(),\n  mensagem: text(\"mensagem\").notNull(),\n  tipo: text(\"tipo\").notNull(), // info, success, warning, error\n  link: text(\"link\"),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Schedules table (escalas)\nexport const schedules = pgTable(\"schedules\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  mes: integer(\"mes\").notNull(), // 1-12\n  ano: integer(\"ano\").notNull(), // 2025, 2026, etc\n  tipo: text(\"tipo\").notNull(), // louvor, obreiros\n  data: date(\"data\").notNull(), // data específica do culto\n  observacoes: text(\"observacoes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Schedule assignments (atribuições de escala)\nexport const scheduleAssignments = pgTable(\"schedule_assignments\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  scheduleId: integer(\"schedule_id\").notNull().references(() => schedules.id, { onDelete: \"cascade\" }),\n  userId: integer(\"user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  posicao: text(\"posicao\").notNull(), // teclado, violao, baixo, bateria, voz, backing, obreiro\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Questions table (perguntas do quiz por lição)\nexport const questions = pgTable(\"questions\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  lessonId: integer(\"lesson_id\").notNull().references(() => lessons.id, { onDelete: \"cascade\" }),\n  pergunta: text(\"pergunta\").notNull(),\n  opcaoA: text(\"opcao_a\").notNull(),\n  opcaoB: text(\"opcao_b\").notNull(),\n  opcaoC: text(\"opcao_c\").notNull(),\n  respostaCorreta: text(\"resposta_correta\").notNull(), // 'A', 'B', ou 'C'\n  ordem: integer(\"ordem\").notNull().default(1), // 1, 2, ou 3\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Lesson completions (conclusão de lições pelos usuários)\nexport const lessonCompletions = pgTable(\"lesson_completions\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  userId: integer(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  lessonId: integer(\"lesson_id\").notNull().references(() => lessons.id, { onDelete: \"cascade\" }),\n  completed: boolean(\"completed\").notNull().default(false),\n  score: integer(\"score\").notNull().default(0), // 0-3 (número de acertos)\n  tentativas: integer(\"tentativas\").notNull().default(1),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Relations\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  lessons: many(lessons),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one }) => ({\n  course: one(courses, {\n    fields: [lessons.cursoId],\n    references: [courses.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users, {\n  email: z.string().email(\"Email inválido\"),\n  senha: z.string().min(6, \"Senha deve ter no mínimo 6 caracteres\"),\n  nome: z.string().min(2, \"Nome deve ter no mínimo 2 caracteres\"),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMaterialSchema = createInsertSchema(materials).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPrayerRequestSchema = createInsertSchema(prayerRequests, {\n  nome: z.string().min(2, \"Nome deve ter no mínimo 2 caracteres\"),\n  pedido: z.string().min(10, \"Pedido deve ter no mínimo 10 caracteres\"),\n  email: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n}).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n  isPublic: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n  isRead: true,\n});\n\nexport const insertScheduleSchema = createInsertSchema(schedules).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertScheduleAssignmentSchema = createInsertSchema(scheduleAssignments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuestionSchema = createInsertSchema(questions, {\n  pergunta: z.string().min(10, \"Pergunta deve ter no mínimo 10 caracteres\"),\n  opcaoA: z.string().min(1, \"Opção A é obrigatória\"),\n  opcaoB: z.string().min(1, \"Opção B é obrigatória\"),\n  opcaoC: z.string().min(1, \"Opção C é obrigatória\"),\n  respostaCorreta: z.enum([\"A\", \"B\", \"C\"], { message: \"Resposta correta deve ser A, B ou C\" }),\n}).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLessonCompletionSchema = createInsertSchema(lessonCompletions).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  senha: z.string().min(1, \"Senha é obrigatória\"),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type Material = typeof materials.$inferSelect;\nexport type InsertMaterial = z.infer<typeof insertMaterialSchema>;\nexport type PrayerRequest = typeof prayerRequests.$inferSelect;\nexport type InsertPrayerRequest = z.infer<typeof insertPrayerRequestSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Schedule = typeof schedules.$inferSelect;\nexport type InsertSchedule = z.infer<typeof insertScheduleSchema>;\nexport type ScheduleAssignment = typeof scheduleAssignments.$inferSelect;\nexport type InsertScheduleAssignment = z.infer<typeof insertScheduleAssignmentSchema>;\nexport type Question = typeof questions.$inferSelect;\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\nexport type LessonCompletion = typeof lessonCompletions.$inferSelect;\nexport type InsertLessonCompletion = z.infer<typeof insertLessonCompletionSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n","size_bytes":9572},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Church, ArrowLeft } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginCredentials } from \"@shared/schema\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [rememberMe, setRememberMe] = useState(false);\n\n  const form = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      senha: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      const res = await apiRequest<{ user: any; token: string }>(\"POST\", \"/api/auth/login\", credentials);\n      return res;\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      \n      if (data.user.isAdmin) {\n        setLocation(\"/admin\");\n      } else {\n        setLocation(\"/membro\");\n      }\n      \n      toast({\n        title: \"Login realizado com sucesso!\",\n        description: `Bem-vindo(a), ${data.user.nome}!`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao fazer login\",\n        description: error.message || \"Verifique suas credenciais e tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginCredentials) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-gradient-to-br from-primary/5 via-background to-gold/5\">\n      <div className=\"w-full max-w-md\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Voltar ao site\n          </Button>\n        </Link>\n        \n        <Card className=\"shadow-xl\">\n          <CardHeader className=\"text-center space-y-4 pb-8\">\n            <div className=\"flex justify-center\">\n              <div className=\"p-4 rounded-full bg-primary/10\">\n                <Church className=\"w-12 h-12 text-primary\" />\n              </div>\n            </div>\n            <div>\n              <CardTitle className=\"text-3xl font-sans font-semibold\" data-testid=\"text-login-title\">\n                Área do Membro\n              </CardTitle>\n              <CardDescription className=\"text-base mt-2\">\n                Entre com suas credenciais para acessar\n              </CardDescription>\n            </div>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"seu@email.com\"\n                  data-testid=\"input-email\"\n                  {...form.register(\"email\")}\n                  className={form.formState.errors.email ? \"border-destructive\" : \"\"}\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"senha\">Senha</Label>\n                <Input\n                  id=\"senha\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  data-testid=\"input-password\"\n                  {...form.register(\"senha\")}\n                  className={form.formState.errors.senha ? \"border-destructive\" : \"\"}\n                />\n                {form.formState.errors.senha && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.senha.message}</p>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"remember\"\n                  checked={rememberMe}\n                  onChange={(e) => setRememberMe(e.target.checked)}\n                  className=\"w-4 h-4 rounded border-input\"\n                  data-testid=\"checkbox-remember\"\n                />\n                <Label htmlFor=\"remember\" className=\"text-sm font-normal cursor-pointer\">\n                  Lembrar de mim\n                </Label>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                size=\"lg\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Entrando...\" : \"Entrar\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n              <p>Não tem uma conta? Entre em contato com a secretaria da igreja.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5557},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/member-materials.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen, ExternalLink, FileText } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Material } from \"@shared/schema\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function MemberMaterials() {\n  const { data: materials = [], isLoading } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  const pdfs = materials.filter(m => m.tipo === \"pdf\");\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-materials-title\">\n          Apostilas\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Acesse os materiais de estudo disponíveis\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"p-6\">\n              <div className=\"h-24 bg-muted animate-pulse rounded\" />\n            </Card>\n          ))}\n        </div>\n      ) : pdfs.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {pdfs.map((material) => (\n            <Card key={material.id} className=\"hover-elevate\" data-testid={`card-material-${material.id}`}>\n              <CardHeader className=\"flex flex-row items-start gap-4 space-y-0\">\n                <div className=\"p-3 rounded-lg bg-primary/10 shrink-0\">\n                  <FileText className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-lg mb-2\">{material.titulo}</CardTitle>\n                  {material.descricao && (\n                    <p className=\"text-sm text-muted-foreground\">{material.descricao}</p>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Button\n                  className=\"w-full\"\n                  onClick={() => window.open(material.arquivoUrl, '_blank')}\n                  data-testid={`button-open-${material.id}`}\n                >\n                  Abrir PDF\n                  <ExternalLink className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-16\">\n          <div className=\"text-center\">\n            <BookOpen className=\"w-20 h-20 mx-auto text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Nenhuma apostila disponível</h3>\n            <p className=\"text-muted-foreground\">\n              Novos materiais serão adicionados em breve\n            </p>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":2855},"client/src/pages/admin-events.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Calendar, Plus, Trash2, MapPin } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { Event, InsertEvent } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertEventSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminEvents() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: events = [], isLoading } = useQuery<Event[]>({\n    queryKey: [\"/api/admin/events\"],\n  });\n\n  const form = useForm<InsertEvent>({\n    resolver: zodResolver(insertEventSchema),\n    defaultValues: {\n      titulo: \"\",\n      descricao: \"\",\n      data: \"\",\n      local: \"\",\n      imagem: \"\",\n    },\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: async (data: InsertEvent) => {\n      return await apiRequest<Event>(\"POST\", \"/api/admin/events\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events/public\"] });\n      toast({\n        title: \"Evento criado com sucesso!\",\n        description: \"O novo evento foi adicionado ao calendário.\",\n      });\n      setIsCreateOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar evento\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEventMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/events/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events/public\"] });\n      toast({\n        title: \"Evento removido\",\n        description: \"O evento foi removido do calendário.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertEvent) => {\n    createEventMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-events-title\">\n            Gerenciar Eventos\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            {events.length} eventos cadastrados\n          </p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-event\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Novo Evento\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Criar Novo Evento</DialogTitle>\n              <DialogDescription>\n                Preencha as informações do evento\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"titulo\">Título do Evento *</Label>\n                <Input id=\"titulo\" {...form.register(\"titulo\")} data-testid=\"input-event-title\" />\n                {form.formState.errors.titulo && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.titulo.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"descricao\">Descrição *</Label>\n                <Textarea\n                  id=\"descricao\"\n                  rows={4}\n                  {...form.register(\"descricao\")}\n                  data-testid=\"textarea-event-description\"\n                />\n                {form.formState.errors.descricao && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.descricao.message}</p>\n                )}\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"data\">Data do Evento *</Label>\n                  <Input id=\"data\" type=\"date\" {...form.register(\"data\")} data-testid=\"input-event-date\" />\n                  {form.formState.errors.data && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.data.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"local\">Local *</Label>\n                  <Input id=\"local\" {...form.register(\"local\")} data-testid=\"input-event-location\" />\n                  {form.formState.errors.local && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.local.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"imagem\">URL da Imagem</Label>\n                <Input\n                  id=\"imagem\"\n                  placeholder=\"https://example.com/image.jpg\"\n                  {...form.register(\"imagem\")}\n                  data-testid=\"input-event-image\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={createEventMutation.isPending} data-testid=\"button-submit-event\">\n                  {createEventMutation.isPending ? \"Criando...\" : \"Criar Evento\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"overflow-hidden\">\n              <div className=\"h-48 bg-muted animate-pulse\" />\n              <CardHeader>\n                <div className=\"h-6 bg-muted animate-pulse rounded mb-2\" />\n                <div className=\"h-4 bg-muted animate-pulse rounded\" />\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n      ) : events.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {events.map((event) => (\n            <Card key={event.id} className=\"overflow-hidden hover-elevate\" data-testid={`card-event-${event.id}`}>\n              {event.imagem ? (\n                <div className=\"h-48 overflow-hidden\">\n                  <img\n                    src={event.imagem}\n                    alt={event.titulo}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              ) : (\n                <div className=\"h-48 bg-gradient-to-br from-primary/20 to-gold/20 flex items-center justify-center\">\n                  <Calendar className=\"w-16 h-16 text-primary/50\" />\n                </div>\n              )}\n              <CardHeader>\n                <CardTitle className=\"text-xl\">{event.titulo}</CardTitle>\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span>{new Date(event.data).toLocaleDateString('pt-BR')}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <MapPin className=\"w-4 h-4\" />\n                    <span>{event.local}</span>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-foreground/70 line-clamp-2\">{event.descricao}</p>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => {\n                    if (confirm(`Tem certeza que deseja remover ${event.titulo}?`)) {\n                      deleteEventMutation.mutate(event.id);\n                    }\n                  }}\n                  data-testid={`button-delete-event-${event.id}`}\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Remover\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-16\">\n          <div className=\"text-center\">\n            <Calendar className=\"w-20 h-20 mx-auto text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Nenhum evento cadastrado</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Comece criando seu primeiro evento\n            </p>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Criar Primeiro Evento\n            </Button>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9682},"client/src/pages/admin-members.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Users, Plus, Search, Download, Trash2, Shield, Pencil } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { User, InsertUser } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { z } from \"zod\";\n\n// Schema for editing (all fields optional except nome and email)\nconst editUserSchema = z.object({\n  nome: z.string().min(1, \"Nome é obrigatório\"),\n  email: z.string().email(\"Email inválido\"),\n  senha: z.string().optional(),\n  dataNascimento: z.string().optional(),\n  profissao: z.string().optional(),\n  endereco: z.string().optional(),\n  bairro: z.string().optional(),\n  cidade: z.string().optional(),\n  isAdmin: z.boolean().optional(),\n  ministerio: z.string().nullable().optional(),\n  isLider: z.boolean().optional(),\n});\n\ntype EditUserForm = z.infer<typeof editUserSchema>;\n\nexport default function AdminMembers() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [editingMember, setEditingMember] = useState<User | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterBairro, setFilterBairro] = useState(\"\");\n  const [filterProfissao, setFilterProfissao] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: members = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/members\"],\n  });\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      nome: \"\",\n      email: \"\",\n      senha: \"\",\n      dataNascimento: undefined,\n      profissao: \"\",\n      endereco: \"\",\n      bairro: \"\",\n      cidade: \"\",\n      isAdmin: false,\n    },\n  });\n\n  const editForm = useForm<EditUserForm>({\n    resolver: zodResolver(editUserSchema),\n    defaultValues: {\n      nome: \"\",\n      email: \"\",\n      senha: \"\",\n      dataNascimento: undefined,\n      profissao: \"\",\n      endereco: \"\",\n      bairro: \"\",\n      cidade: \"\",\n      isAdmin: false,\n      ministerio: \"\",\n      isLider: false,\n    },\n  });\n\n  const createMemberMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      return await apiRequest<User>(\"POST\", \"/api/admin/members\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/members\"] });\n      toast({\n        title: \"Membro criado com sucesso!\",\n        description: \"O novo membro foi cadastrado no sistema.\",\n      });\n      setIsCreateOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar membro\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMemberMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/members/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/members\"] });\n      toast({\n        title: \"Membro removido\",\n        description: \"O membro foi removido do sistema.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao remover membro\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMemberMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<InsertUser> }) => {\n      return await apiRequest<User>(\"PATCH\", `/api/admin/members/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/members\"] });\n      toast({\n        title: \"Membro atualizado!\",\n        description: \"As informações do membro foram atualizadas.\",\n      });\n      setIsEditOpen(false);\n      setEditingMember(null);\n      editForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar membro\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleAdminMutation = useMutation({\n    mutationFn: async ({ id, isAdmin }: { id: number; isAdmin: boolean }) => {\n      return await apiRequest<User>(\"PATCH\", `/api/admin/members/${id}/toggle-admin`, { isAdmin });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/members\"] });\n      toast({\n        title: \"Permissões atualizadas\",\n        description: \"As permissões do membro foram alteradas.\",\n      });\n    },\n  });\n\n  const handleEditMember = (member: User) => {\n    setEditingMember(member);\n    editForm.reset({\n      nome: member.nome,\n      email: member.email,\n      senha: \"\", // Senha opcional na edição\n      dataNascimento: member.dataNascimento || undefined,\n      profissao: member.profissao || \"\",\n      endereco: member.endereco || \"\",\n      bairro: member.bairro || \"\",\n      cidade: member.cidade || \"\",\n      isAdmin: member.isAdmin,\n      ministerio: member.ministerio || \"\",\n      isLider: member.isLider || false,\n    });\n    setIsEditOpen(true);\n  };\n\n  const filteredMembers = members.filter(member => {\n    const matchesSearch = member.nome.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         member.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesBairro = !filterBairro || filterBairro === \"_all\" || member.bairro === filterBairro;\n    const matchesProfissao = !filterProfissao || filterProfissao === \"_all\" || member.profissao === filterProfissao;\n    return matchesSearch && matchesBairro && matchesProfissao;\n  });\n\n  const uniqueBairros = Array.from(new Set(members.map(m => m.bairro).filter(Boolean))) as string[];\n  const uniqueProfissoes = Array.from(new Set(members.map(m => m.profissao).filter(Boolean))) as string[];\n\n  const exportToCSV = () => {\n    const headers = [\"Nome\", \"Email\", \"Data Nascimento\", \"Profissão\", \"Cidade\", \"Bairro\", \"Admin\"];\n    const rows = filteredMembers.map(m => [\n      m.nome,\n      m.email,\n      m.dataNascimento || \"\",\n      m.profissao || \"\",\n      m.cidade || \"\",\n      m.bairro || \"\",\n      m.isAdmin ? \"Sim\" : \"Não\"\n    ]);\n    \n    const csvContent = [headers, ...rows].map(row => row.join(\",\")).join(\"\\n\");\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"membros.csv\";\n    a.click();\n    \n    toast({\n      title: \"CSV exportado\",\n      description: `${filteredMembers.length} membros exportados com sucesso.`,\n    });\n  };\n\n  const onSubmit = (data: InsertUser) => {\n    createMemberMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: EditUserForm) => {\n    if (!editingMember) return;\n    // Remove senha if empty (optional field in update)\n    const updateData: Partial<InsertUser> = { ...data };\n    if (!updateData.senha || updateData.senha.trim() === \"\") {\n      delete updateData.senha;\n    }\n    updateMemberMutation.mutate({ id: editingMember.id, data: updateData });\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-members-title\">\n            Gerenciar Membros\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            {filteredMembers.length} membros cadastrados\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={exportToCSV} variant=\"outline\" data-testid=\"button-export-csv\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Exportar CSV\n          </Button>\n          <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-member\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Novo Membro\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Cadastrar Novo Membro</DialogTitle>\n                <DialogDescription>\n                  Preencha as informações do novo membro\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"nome\">Nome Completo *</Label>\n                    <Input id=\"nome\" {...form.register(\"nome\")} data-testid=\"input-nome\" />\n                    {form.formState.errors.nome && (\n                      <p className=\"text-sm text-destructive\">{form.formState.errors.nome.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input id=\"email\" type=\"email\" {...form.register(\"email\")} data-testid=\"input-email\" />\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"senha\">Senha *</Label>\n                    <Input id=\"senha\" type=\"password\" {...form.register(\"senha\")} data-testid=\"input-senha\" />\n                    {form.formState.errors.senha && (\n                      <p className=\"text-sm text-destructive\">{form.formState.errors.senha.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dataNascimento\">Data de Nascimento</Label>\n                    <Input id=\"dataNascimento\" type=\"date\" {...form.register(\"dataNascimento\")} data-testid=\"input-birthdate\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"profissao\">Profissão</Label>\n                    <Input id=\"profissao\" {...form.register(\"profissao\")} data-testid=\"input-profession\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cidade\">Cidade</Label>\n                    <Input id=\"cidade\" {...form.register(\"cidade\")} data-testid=\"input-city\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bairro\">Bairro</Label>\n                    <Input id=\"bairro\" {...form.register(\"bairro\")} data-testid=\"input-neighborhood\" />\n                  </div>\n\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <Label htmlFor=\"endereco\">Endereço</Label>\n                    <Input id=\"endereco\" {...form.register(\"endereco\")} data-testid=\"input-address\" />\n                  </div>\n\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"isAdmin\"\n                        {...form.register(\"isAdmin\")}\n                        className=\"w-4 h-4 rounded border-input\"\n                        data-testid=\"checkbox-admin\"\n                      />\n                      <Label htmlFor=\"isAdmin\" className=\"font-normal cursor-pointer\">\n                        Conceder permissões de administrador\n                      </Label>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={createMemberMutation.isPending} data-testid=\"button-submit-member\">\n                    {createMemberMutation.isPending ? \"Cadastrando...\" : \"Cadastrar\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n\n          {/* Edit Member Dialog */}\n          <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Editar Membro</DialogTitle>\n                <DialogDescription>\n                  Atualize as informações do membro\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-nome\">Nome Completo *</Label>\n                    <Input id=\"edit-nome\" {...editForm.register(\"nome\")} data-testid=\"input-edit-nome\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-email\">Email *</Label>\n                    <Input id=\"edit-email\" type=\"email\" {...editForm.register(\"email\")} data-testid=\"input-edit-email\" />\n                  </div>\n\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <Label htmlFor=\"edit-senha\">Nova Senha (deixe em branco para manter a atual)</Label>\n                    <Input id=\"edit-senha\" type=\"password\" {...editForm.register(\"senha\")} data-testid=\"input-edit-senha\" placeholder=\"********\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-dataNascimento\">Data de Nascimento</Label>\n                    <Input id=\"edit-dataNascimento\" type=\"date\" {...editForm.register(\"dataNascimento\")} data-testid=\"input-edit-birthdate\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-profissao\">Profissão</Label>\n                    <Input id=\"edit-profissao\" {...editForm.register(\"profissao\")} data-testid=\"input-edit-profession\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-cidade\">Cidade</Label>\n                    <Input id=\"edit-cidade\" {...editForm.register(\"cidade\")} data-testid=\"input-edit-city\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-bairro\">Bairro</Label>\n                    <Input id=\"edit-bairro\" {...editForm.register(\"bairro\")} data-testid=\"input-edit-neighborhood\" />\n                  </div>\n\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <Label htmlFor=\"edit-endereco\">Endereço</Label>\n                    <Input id=\"edit-endereco\" {...editForm.register(\"endereco\")} data-testid=\"input-edit-address\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"edit-ministerio\">Ministério</Label>\n                    <Select\n                      value={editForm.watch(\"ministerio\") || \"_none\"}\n                      onValueChange={(value) => editForm.setValue(\"ministerio\", value === \"_none\" ? null : value)}\n                    >\n                      <SelectTrigger id=\"edit-ministerio\" data-testid=\"select-edit-ministry\">\n                        <SelectValue placeholder=\"Selecione o ministério\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"_none\">Nenhum</SelectItem>\n                        <SelectItem value=\"Louvor\">Louvor</SelectItem>\n                        <SelectItem value=\"Obreiros\">Obreiros</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"edit-isAdmin\"\n                          {...editForm.register(\"isAdmin\")}\n                          className=\"w-4 h-4 rounded border-input\"\n                          data-testid=\"checkbox-edit-admin\"\n                        />\n                        <Label htmlFor=\"edit-isAdmin\" className=\"font-normal cursor-pointer\">\n                          Administrador\n                        </Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"edit-isLider\"\n                          {...editForm.register(\"isLider\")}\n                          className=\"w-4 h-4 rounded border-input\"\n                          data-testid=\"checkbox-edit-leader\"\n                        />\n                        <Label htmlFor=\"edit-isLider\" className=\"font-normal cursor-pointer\">\n                          Líder\n                        </Label>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditOpen(false)}>\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={updateMemberMutation.isPending} data-testid=\"button-submit-edit\">\n                    {updateMemberMutation.isPending ? \"Salvando...\" : \"Salvar Alterações\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Filtros</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Buscar</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Nome ou email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bairro\">Bairro</Label>\n              <Select value={filterBairro || \"_all\"} onValueChange={setFilterBairro}>\n                <SelectTrigger id=\"bairro\" data-testid=\"select-neighborhood\">\n                  <SelectValue placeholder=\"Todos os bairros\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"_all\">Todos os bairros</SelectItem>\n                  {uniqueBairros.map((bairro) => (\n                    <SelectItem key={bairro} value={bairro}>{bairro}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"profissao\">Profissão</Label>\n              <Select value={filterProfissao || \"_all\"} onValueChange={setFilterProfissao}>\n                <SelectTrigger id=\"profissao\" data-testid=\"select-profession\">\n                  <SelectValue placeholder=\"Todas as profissões\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"_all\">Todas as profissões</SelectItem>\n                  {uniqueProfissoes.map((profissao) => (\n                    <SelectItem key={profissao} value={profissao}>{profissao}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Members Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          {isLoading ? (\n            <div className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">Carregando membros...</p>\n            </div>\n          ) : filteredMembers.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nome</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Cidade</TableHead>\n                  <TableHead>Bairro</TableHead>\n                  <TableHead>Profissão</TableHead>\n                  <TableHead>Tipo</TableHead>\n                  <TableHead className=\"text-right\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredMembers.map((member) => (\n                  <TableRow key={member.id} data-testid={`row-member-${member.id}`}>\n                    <TableCell className=\"font-medium\">{member.nome}</TableCell>\n                    <TableCell>{member.email}</TableCell>\n                    <TableCell>{member.cidade || \"-\"}</TableCell>\n                    <TableCell>{member.bairro || \"-\"}</TableCell>\n                    <TableCell>{member.profissao || \"-\"}</TableCell>\n                    <TableCell>\n                      {member.isAdmin ? (\n                        <Badge variant=\"default\" data-testid={`badge-admin-${member.id}`}>\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Admin\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"secondary\" data-testid={`badge-member-${member.id}`}>Membro</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEditMember(member)}\n                          data-testid={`button-edit-${member.id}`}\n                        >\n                          <Pencil className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => toggleAdminMutation.mutate({ id: member.id, isAdmin: !member.isAdmin })}\n                          data-testid={`button-toggle-admin-${member.id}`}\n                        >\n                          <Shield className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            if (confirm(`Tem certeza que deseja remover ${member.nome}?`)) {\n                              deleteMemberMutation.mutate(member.id);\n                            }\n                          }}\n                          data-testid={`button-delete-${member.id}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"p-12 text-center\">\n              <Users className=\"w-16 h-16 mx-auto text-muted-foreground/50 mb-4\" />\n              <p className=\"text-lg text-muted-foreground\">Nenhum membro encontrado</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":24735},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/pages/admin-courses.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { GraduationCap, Plus, Trash2, Edit, PlayCircle, FileQuestion } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { Course, InsertCourse, Lesson, InsertLesson, Question } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCourseSchema, insertLessonSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminCourses() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);\n  const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false);\n  const [selectedLesson, setSelectedLesson] = useState<Lesson | null>(null);\n  const [questions, setQuestions] = useState([\n    { pergunta: \"\", opcaoA: \"\", opcaoB: \"\", opcaoC: \"\", respostaCorreta: \"A\" },\n    { pergunta: \"\", opcaoA: \"\", opcaoB: \"\", opcaoC: \"\", respostaCorreta: \"A\" },\n    { pergunta: \"\", opcaoA: \"\", opcaoB: \"\", opcaoC: \"\", respostaCorreta: \"A\" },\n  ]);\n  const { toast } = useToast();\n\n  const { data: courses = [], isLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: courseLessons = [] } = useQuery<Lesson[]>({\n    queryKey: [\"/api/courses\", selectedCourse?.id, \"lessons\"],\n    enabled: !!selectedCourse,\n  });\n\n  const { data: lessonQuestions = [], isLoading: questionsLoading } = useQuery<Question[]>({\n    queryKey: [\"/api/lessons\", selectedLesson?.id, \"questions\"],\n    enabled: !!selectedLesson && selectedLesson.id !== undefined,\n  });\n\n  const courseForm = useForm<InsertCourse>({\n    resolver: zodResolver(insertCourseSchema),\n    defaultValues: {\n      nome: \"\",\n      descricao: \"\",\n      imagem: \"\",\n    },\n  });\n\n  const lessonForm = useForm<InsertLesson>({\n    resolver: zodResolver(insertLessonSchema),\n    defaultValues: {\n      cursoId: 0,\n      titulo: \"\",\n      descricao: \"\",\n      videoUrl: \"\",\n      ordem: 0,\n    },\n  });\n\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: InsertCourse) => {\n      return await apiRequest<Course>(\"POST\", \"/api/admin/courses\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({\n        title: \"Curso criado com sucesso!\",\n        description: \"O novo curso foi adicionado ao sistema.\",\n      });\n      setIsCreateOpen(false);\n      courseForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar curso\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCourseMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/courses/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({\n        title: \"Curso removido\",\n        description: \"O curso e suas aulas foram removidos do sistema.\",\n      });\n    },\n  });\n\n  const createLessonMutation = useMutation({\n    mutationFn: async (data: InsertLesson) => {\n      return await apiRequest<Lesson>(\"POST\", \"/api/admin/lessons\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\", selectedCourse?.id, \"lessons\"] });\n      toast({\n        title: \"Aula criada com sucesso!\",\n        description: \"A nova aula foi adicionada ao curso.\",\n      });\n      setIsLessonDialogOpen(false);\n      lessonForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar aula\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteLessonMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/lessons/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\", selectedCourse?.id, \"lessons\"] });\n      toast({\n        title: \"Aula removida\",\n        description: \"A aula foi removida do curso.\",\n      });\n    },\n  });\n\n  const saveQuestionsMutation = useMutation({\n    mutationFn: async (data: { lessonId: number; questions: any[] }) => {\n      return await apiRequest(\"POST\", `/api/admin/lessons/${data.lessonId}/questions`, {\n        questions: data.questions,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons\", selectedLesson?.id, \"questions\"] });\n      toast({\n        title: \"Quiz salvo com sucesso!\",\n        description: \"As perguntas foram atualizadas.\",\n      });\n      setSelectedLesson(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao salvar quiz\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onCreateCourse = (data: InsertCourse) => {\n    createCourseMutation.mutate(data);\n  };\n\n  const onCreateLesson = (data: InsertLesson) => {\n    if (selectedCourse) {\n      createLessonMutation.mutate({\n        ...data,\n        cursoId: selectedCourse.id,\n      });\n    }\n  };\n\n  const openQuizDialog = (lesson: Lesson) => {\n    setSelectedLesson(lesson);\n    // Don't reset questions here - let useEffect handle it once data loads\n  };\n\n  const handleSaveQuestions = () => {\n    if (!selectedLesson) return;\n\n    // Validate all questions\n    const allFilled = questions.every(\n      q => q.pergunta && q.opcaoA && q.opcaoB && q.opcaoC && q.respostaCorreta\n    );\n\n    if (!allFilled) {\n      toast({\n        title: \"Preencha todas as perguntas\",\n        description: \"Todas as 3 perguntas devem estar completas.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveQuestionsMutation.mutate({\n      lessonId: selectedLesson.id,\n      questions,\n    });\n  };\n\n  // Load existing questions ONLY when lesson first opens (not on every refetch)\n  useEffect(() => {\n    if (!selectedLesson) return;\n    \n    // Only load questions from server once when dialog opens\n    if (!questionsLoading && lessonQuestions.length === 3) {\n      setQuestions([\n        {\n          pergunta: lessonQuestions[0].pergunta,\n          opcaoA: lessonQuestions[0].opcaoA,\n          opcaoB: lessonQuestions[0].opcaoB,\n          opcaoC: lessonQuestions[0].opcaoC,\n          respostaCorreta: lessonQuestions[0].respostaCorreta,\n        },\n        {\n          pergunta: lessonQuestions[1].pergunta,\n          opcaoA: lessonQuestions[1].opcaoA,\n          opcaoB: lessonQuestions[1].opcaoB,\n          opcaoC: lessonQuestions[1].opcaoC,\n          respostaCorreta: lessonQuestions[1].respostaCorreta,\n        },\n        {\n          pergunta: lessonQuestions[2].pergunta,\n          opcaoA: lessonQuestions[2].opcaoA,\n          opcaoB: lessonQuestions[2].opcaoB,\n          opcaoC: lessonQuestions[2].opcaoC,\n          respostaCorreta: lessonQuestions[2].respostaCorreta,\n        },\n      ]);\n    } else if (!questionsLoading) {\n      // Reset to empty if no existing questions\n      setQuestions([\n        { pergunta: \"\", opcaoA: \"\", opcaoB: \"\", opcaoC: \"\", respostaCorreta: \"A\" },\n        { pergunta: \"\", opcaoA: \"\", opcaoB: \"\", opcaoC: \"\", respostaCorreta: \"A\" },\n        { pergunta: \"\", opcaoA: \"\", opcaoB: \"\", opcaoC: \"\", respostaCorreta: \"A\" },\n      ]);\n    }\n    // Only run when selectedLesson changes or initial load completes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedLesson?.id, questionsLoading]);\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-courses-title\">\n            Gerenciar Cursos\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            {courses.length} cursos cadastrados\n          </p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-course\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Novo Curso\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Criar Novo Curso</DialogTitle>\n              <DialogDescription>\n                Preencha as informações do curso\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={courseForm.handleSubmit(onCreateCourse)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nome\">Nome do Curso *</Label>\n                <Input id=\"nome\" {...courseForm.register(\"nome\")} data-testid=\"input-course-name\" />\n                {courseForm.formState.errors.nome && (\n                  <p className=\"text-sm text-destructive\">{courseForm.formState.errors.nome.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"descricao\">Descrição *</Label>\n                <Textarea\n                  id=\"descricao\"\n                  rows={4}\n                  {...courseForm.register(\"descricao\")}\n                  data-testid=\"textarea-course-description\"\n                />\n                {courseForm.formState.errors.descricao && (\n                  <p className=\"text-sm text-destructive\">{courseForm.formState.errors.descricao.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"imagem\">URL da Imagem</Label>\n                <Input\n                  id=\"imagem\"\n                  placeholder=\"https://example.com/image.jpg\"\n                  {...courseForm.register(\"imagem\")}\n                  data-testid=\"input-course-image\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={createCourseMutation.isPending} data-testid=\"button-submit-course\">\n                  {createCourseMutation.isPending ? \"Criando...\" : \"Criar Curso\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"overflow-hidden\">\n              <div className=\"h-48 bg-muted animate-pulse\" />\n              <CardHeader>\n                <div className=\"h-6 bg-muted animate-pulse rounded mb-2\" />\n                <div className=\"h-4 bg-muted animate-pulse rounded\" />\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n      ) : courses.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {courses.map((course) => (\n            <Card key={course.id} className=\"overflow-hidden hover-elevate\" data-testid={`card-course-${course.id}`}>\n              {course.imagem ? (\n                <div className=\"h-48 overflow-hidden\">\n                  <img\n                    src={course.imagem}\n                    alt={course.nome}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              ) : (\n                <div className=\"h-48 bg-gradient-to-br from-primary/20 to-gold/20 flex items-center justify-center\">\n                  <GraduationCap className=\"w-16 h-16 text-primary/50\" />\n                </div>\n              )}\n              <CardHeader>\n                <CardTitle className=\"text-xl\">{course.nome}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-foreground/70 line-clamp-2\">{course.descricao}</p>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    onClick={() => setSelectedCourse(course)}\n                    data-testid={`button-manage-lessons-${course.id}`}\n                  >\n                    <PlayCircle className=\"w-4 h-4 mr-2\" />\n                    Aulas\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => {\n                      if (confirm(`Tem certeza que deseja remover ${course.nome}?`)) {\n                        deleteCourseMutation.mutate(course.id);\n                      }\n                    }}\n                    data-testid={`button-delete-course-${course.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-16\">\n          <div className=\"text-center\">\n            <GraduationCap className=\"w-20 h-20 mx-auto text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Nenhum curso cadastrado</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Comece criando seu primeiro curso\n            </p>\n            <Button onClick={() => setIsCreateOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Criar Primeiro Curso\n            </Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Course Lessons Dialog */}\n      <Dialog open={!!selectedCourse} onOpenChange={() => setSelectedCourse(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">{selectedCourse?.nome}</DialogTitle>\n            <DialogDescription>\n              Gerencie as aulas deste curso\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <Button onClick={() => setIsLessonDialogOpen(true)} data-testid=\"button-add-lesson\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Adicionar Aula\n            </Button>\n\n            {courseLessons.length > 0 ? (\n              <div className=\"space-y-2\">\n                {courseLessons\n                  .sort((a, b) => a.ordem - b.ordem)\n                  .map((lesson, index) => (\n                    <Card key={lesson.id} data-testid={`card-lesson-${lesson.id}`}>\n                      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 p-4\">\n                        <div className=\"flex items-center gap-4 flex-1\">\n                          <div className=\"flex items-center justify-center w-10 h-10 rounded-full bg-primary/10 text-primary font-semibold\">\n                            {index + 1}\n                          </div>\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-base\">{lesson.titulo}</CardTitle>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {lesson.descricao}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => openQuizDialog(lesson)}\n                            data-testid={`button-quiz-${lesson.id}`}\n                          >\n                            <FileQuestion className=\"w-4 h-4 mr-2\" />\n                            Quiz\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(`Tem certeza que deseja remover esta aula?`)) {\n                                deleteLessonMutation.mutate(lesson.id);\n                              }\n                            }}\n                            data-testid={`button-delete-lesson-${lesson.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </CardHeader>\n                    </Card>\n                  ))}\n              </div>\n            ) : (\n              <Card className=\"p-8\">\n                <div className=\"text-center\">\n                  <PlayCircle className=\"w-12 h-12 mx-auto text-muted-foreground/50 mb-3\" />\n                  <p className=\"text-muted-foreground\">Nenhuma aula cadastrada ainda</p>\n                </div>\n              </Card>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Lesson Dialog */}\n      <Dialog open={isLessonDialogOpen} onOpenChange={setIsLessonDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Adicionar Nova Aula</DialogTitle>\n            <DialogDescription>\n              Preencha as informações da aula\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={lessonForm.handleSubmit(onCreateLesson)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"titulo\">Título da Aula *</Label>\n              <Input id=\"titulo\" {...lessonForm.register(\"titulo\")} data-testid=\"input-lesson-title\" />\n              {lessonForm.formState.errors.titulo && (\n                <p className=\"text-sm text-destructive\">{lessonForm.formState.errors.titulo.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"descricao-lesson\">Descrição *</Label>\n              <Textarea\n                id=\"descricao-lesson\"\n                rows={3}\n                {...lessonForm.register(\"descricao\")}\n                data-testid=\"textarea-lesson-description\"\n              />\n              {lessonForm.formState.errors.descricao && (\n                <p className=\"text-sm text-destructive\">{lessonForm.formState.errors.descricao.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"videoUrl\">URL do Vídeo do YouTube *</Label>\n              <Input\n                id=\"videoUrl\"\n                placeholder=\"https://www.youtube.com/watch?v=...\"\n                {...lessonForm.register(\"videoUrl\")}\n                data-testid=\"input-lesson-video\"\n              />\n              {lessonForm.formState.errors.videoUrl && (\n                <p className=\"text-sm text-destructive\">{lessonForm.formState.errors.videoUrl.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"ordem\">Ordem</Label>\n              <Input\n                id=\"ordem\"\n                type=\"number\"\n                {...lessonForm.register(\"ordem\", { valueAsNumber: true })}\n                data-testid=\"input-lesson-order\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsLessonDialogOpen(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" disabled={createLessonMutation.isPending} data-testid=\"button-submit-lesson\">\n                {createLessonMutation.isPending ? \"Criando...\" : \"Criar Aula\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Quiz Questions Dialog */}\n      <Dialog open={!!selectedLesson} onOpenChange={() => setSelectedLesson(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">Quiz - {selectedLesson?.titulo}</DialogTitle>\n            <DialogDescription>\n              Configure 3 perguntas de múltipla escolha para validar o aprendizado\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {questions.map((question, index) => (\n              <Card key={index} data-testid={`card-question-${index + 1}`}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Pergunta {index + 1}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor={`pergunta-${index}`}>Pergunta *</Label>\n                    <Textarea\n                      id={`pergunta-${index}`}\n                      value={question.pergunta}\n                      onChange={(e) => {\n                        const newQuestions = [...questions];\n                        newQuestions[index].pergunta = e.target.value;\n                        setQuestions(newQuestions);\n                      }}\n                      rows={2}\n                      data-testid={`textarea-question-${index + 1}`}\n                      placeholder=\"Digite a pergunta...\"\n                    />\n                  </div>\n\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor={`opcaoA-${index}`}>Opção A *</Label>\n                      <Input\n                        id={`opcaoA-${index}`}\n                        value={question.opcaoA}\n                        onChange={(e) => {\n                          const newQuestions = [...questions];\n                          newQuestions[index].opcaoA = e.target.value;\n                          setQuestions(newQuestions);\n                        }}\n                        data-testid={`input-option-a-${index + 1}`}\n                        placeholder=\"Resposta A\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor={`opcaoB-${index}`}>Opção B *</Label>\n                      <Input\n                        id={`opcaoB-${index}`}\n                        value={question.opcaoB}\n                        onChange={(e) => {\n                          const newQuestions = [...questions];\n                          newQuestions[index].opcaoB = e.target.value;\n                          setQuestions(newQuestions);\n                        }}\n                        data-testid={`input-option-b-${index + 1}`}\n                        placeholder=\"Resposta B\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor={`opcaoC-${index}`}>Opção C *</Label>\n                      <Input\n                        id={`opcaoC-${index}`}\n                        value={question.opcaoC}\n                        onChange={(e) => {\n                          const newQuestions = [...questions];\n                          newQuestions[index].opcaoC = e.target.value;\n                          setQuestions(newQuestions);\n                        }}\n                        data-testid={`input-option-c-${index + 1}`}\n                        placeholder=\"Resposta C\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor={`resposta-${index}`}>Resposta Correta *</Label>\n                    <Select\n                      value={question.respostaCorreta}\n                      onValueChange={(value) => {\n                        const newQuestions = [...questions];\n                        newQuestions[index].respostaCorreta = value;\n                        setQuestions(newQuestions);\n                      }}\n                    >\n                      <SelectTrigger data-testid={`select-answer-${index + 1}`}>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"A\">A - {question.opcaoA || \"...\"}</SelectItem>\n                        <SelectItem value=\"B\">B - {question.opcaoB || \"...\"}</SelectItem>\n                        <SelectItem value=\"C\">C - {question.opcaoC || \"...\"}</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => setSelectedLesson(null)}\n              data-testid=\"button-cancel-quiz\"\n            >\n              Cancelar\n            </Button>\n            <Button \n              onClick={handleSaveQuestions}\n              disabled={saveQuestionsMutation.isPending}\n              data-testid=\"button-save-quiz\"\n            >\n              {saveQuestionsMutation.isPending ? \"Salvando...\" : \"Salvar Quiz\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":25871},"design_guidelines.md":{"content":"# Church Website Design Guidelines\n\n## Design Approach\n\n**Selected Framework**: Hybrid approach combining reference-based design for public pages with system-based design for admin functionality. Drawing inspiration from modern church websites like Elevation Church and Hillsong, while utilizing established patterns for data management interfaces.\n\n**Core Design Principles**:\n- Welcoming and inclusive visual language\n- Clear hierarchy between sacred/community content and functional elements\n- Professional yet approachable aesthetic\n- Trust-building through thoughtful imagery and typography\n\n## Typography\n\n**Font Families** (via Google Fonts CDN):\n- Primary: 'Poppins' - Headings, navigation, buttons\n- Secondary: 'Inter' - Body text, forms, data tables\n\n**Type Scale**:\n- Hero Headlines: text-5xl to text-6xl, font-semibold\n- Section Headers: text-3xl to text-4xl, font-semibold\n- Subsection Headers: text-xl to text-2xl, font-medium\n- Body Text: text-base to text-lg, font-normal\n- Small Text/Captions: text-sm, font-normal\n\n## Layout System\n\n**Spacing Primitives**: Consistent use of Tailwind units: 2, 4, 6, 8, 12, 16, 20, 24 for padding/margins\n**Container Strategy**: max-w-7xl for main content, max-w-4xl for text-focused sections\n**Grid System**: 12-column grid for desktop, collapsing to single column on mobile\n\n## Page-Specific Design Specifications\n\n### Homepage (Public)\n\n**Hero Section**:\n- Full-width hero with large background image (church exterior or worship scene)\n- Height: 85vh minimum\n- Overlay: Subtle dark gradient (top-to-bottom) for text legibility\n- Content: Centered layout with church name (text-6xl), welcoming tagline (text-xl), primary CTA button\n- Button treatment: Backdrop blur (backdrop-blur-md) with semi-transparent background\n\n**About Section**:\n- Two-column layout (60/40 split) on desktop\n- Left: Text content with heading and 2-3 paragraphs\n- Right: Image collage (2-3 smaller images in grid)\n- Mobile: Stacked single column\n\n**Worship Schedule Section**:\n- Card-based layout (2-column on tablet, 3-column on desktop)\n- Each card: Day, service name, time, brief description\n- Icon integration: Clock/calendar icons from Heroicons\n\n**Upcoming Events Section**:\n- Horizontal scrolling card carousel on mobile, 3-column grid on desktop\n- Each event card: Featured image, title, date badge, location, short description, \"Learn More\" link\n- Cards elevated with subtle shadow (shadow-lg)\n\n**Footer**:\n- Three-column layout: Contact info, Quick Links, Google Maps embed\n- Full-width on mobile (stacked sections)\n- Social media icons row\n- Spacing: py-16 section padding\n\n### Login Page\n\n**Layout**: Centered card design (max-w-md) with generous whitespace\n**Card Structure**: \n- Church logo at top\n- \"Member Login\" heading (text-3xl)\n- Form fields with labels above inputs\n- \"Remember Me\" checkbox\n- Primary action button (full-width)\n- Spacing: p-8 card padding, gap-6 between form elements\n\n### Member Area (/membro)\n\n**Navigation**: Persistent left sidebar (w-64) on desktop, collapsible hamburger on mobile\n**Sidebar Contents**:\n- Member name and welcome message at top\n- Icon-based navigation menu (Heroicons)\n- Logout button at bottom\n\n**Dashboard Layout**:\n- Welcome banner with member name (py-8)\n- Stats cards row (3-column grid): Total Courses, Completed Lessons, New Content count\n- Recent content grid below (2-column on tablet, 3-column on desktop)\n\n**Content Pages (PDFs/Videos)**:\n- List view with thumbnail/icon, title, description, access button\n- Filtering/search bar at top\n- Generous spacing between items (gap-6)\n\n### Courses Section\n\n**Course Listing**:\n- Card grid (2-column tablet, 3-column desktop)\n- Each card: Course image, title, description snippet, lesson count, progress indicator, \"Continue\" button\n\n**Course Detail Page**:\n- Two-column layout: Left sidebar with module/lesson list, Right main content area with video player\n- Video player: 16:9 aspect ratio, full-width of content area\n- Lesson title above player (text-2xl)\n- Description below player\n- Module accordion in sidebar\n\n### Admin Panel\n\n**Dashboard**: Data-focused with metrics cards and quick actions\n**Layout**: Top navigation bar + content area (no sidebar for admin to maximize space)\n**Member Management**:\n- Data table with sortable columns, search, filters\n- Action buttons: inline edit/delete icons\n- \"Add Member\" primary button (top-right)\n- Filter pills above table (age range, neighborhood, profession)\n\n**Forms** (Create/Edit):\n- Single column form layout (max-w-2xl)\n- Grouped sections with headers\n- Two-column layout for related short fields (city/neighborhood)\n- Clear save/cancel actions at bottom\n\n## Component Library\n\n**Buttons**:\n- Primary: Solid fill, rounded-lg, px-6 py-3, text-base\n- Secondary: Border outline, same dimensions\n- Text: No background, underline on hover\n\n**Cards**:\n- Background with border or subtle shadow\n- Rounded corners (rounded-xl)\n- Padding: p-6 for content cards\n\n**Form Inputs**:\n- Full-width within containers\n- Border with focus ring\n- Rounded corners (rounded-lg)\n- Height: h-12 for text inputs\n- Label spacing: mb-2 above input\n\n**Navigation**:\n- Horizontal top nav for public pages (sticky)\n- Items: gap-8 spacing\n- Active state: underline or background highlight\n\n**Modal/Overlays**:\n- Centered overlay with backdrop blur\n- Max-width constraints (max-w-lg for small, max-w-4xl for large)\n- Close button top-right\n\n## Images\n\n**Required Images**:\n1. **Hero Image**: Full-width church exterior or worship moment (modern, bright, welcoming)\n2. **About Section Collage**: 2-3 images showing community, worship, fellowship\n3. **Event Images**: Featured image for each event card (4-6 placeholder events)\n4. **Course Thumbnails**: Representative image per course\n5. **Footer**: Optional small decorative element or pattern\n\n**Image Treatment**: \n- All images with subtle rounded corners (rounded-lg)\n- Hero maintains aspect ratio across viewports\n- Event/course images: aspect-video for consistency\n\n## Animations\n\n**Minimal Approach**:\n- Smooth page transitions (no aggressive animations)\n- Subtle hover states on cards (slight elevation increase)\n- Form feedback (success/error states)\n- No scroll-triggered animations\n\n## Accessibility\n\n- Semantic HTML structure throughout\n- ARIA labels for icon-only buttons\n- Keyboard navigation support for all interactive elements\n- Form inputs with associated labels\n- Color contrast ratios meeting WCAG AA standards\n- Focus indicators visible on all interactive elements","size_bytes":6500},"client/src/components/admin-layout.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Church, Users, GraduationCap, Calendar, BookOpen, LogOut, Home, Heart, BarChart3 } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function AdminLayout({ children }: AdminLayoutProps) {\n  const [location, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const userData = localStorage.getItem(\"user\");\n    \n    if (!token || !userData) {\n      setLocation(\"/login\");\n      return;\n    }\n    \n    const parsedUser = JSON.parse(userData);\n    if (!parsedUser.isAdmin) {\n      setLocation(\"/membro\");\n      return;\n    }\n    \n    setUser(parsedUser);\n  }, [setLocation]);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setLocation(\"/\");\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  const navItems = [\n    { path: \"/admin\", icon: Home, label: \"Dashboard\" },\n    { path: \"/admin/members\", icon: Users, label: \"Membros\" },\n    { path: \"/admin/analytics\", icon: BarChart3, label: \"Analytics\" },\n    { path: \"/admin/courses\", icon: GraduationCap, label: \"Cursos\" },\n    { path: \"/admin/events\", icon: Calendar, label: \"Eventos\" },\n    { path: \"/admin/materials\", icon: BookOpen, label: \"Materiais\" },\n    { path: \"/admin/prayers\", icon: Heart, label: \"Orações\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Top Navigation */}\n      <header className=\"sticky top-0 z-50 bg-card border-b\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              <Church className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"font-sans font-semibold text-lg\">Painel Administrativo</h1>\n              <p className=\"text-sm text-muted-foreground\">Olá, {user.nome}</p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" onClick={handleLogout} data-testid=\"button-logout\">\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Sair\n          </Button>\n        </div>\n        <nav className=\"flex gap-1 px-6 overflow-x-auto\">\n          {navItems.map((item) => (\n            <Link key={item.path} href={item.path}>\n              <Button\n                variant={location === item.path ? \"secondary\" : \"ghost\"}\n                className=\"gap-2 whitespace-nowrap\"\n                data-testid={`link-${item.label.toLowerCase()}`}\n              >\n                <item.icon className=\"w-4 h-4\" />\n                {item.label}\n              </Button>\n            </Link>\n          ))}\n        </nav>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"p-8 max-w-7xl mx-auto\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":3057},"client/src/pages/prayers.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertPrayerRequestSchema, type InsertPrayerRequest, type PrayerRequest } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Send, Heart } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function PrayersPage() {\n  const { toast } = useToast();\n\n  const form = useForm<InsertPrayerRequest>({\n    resolver: zodResolver(insertPrayerRequestSchema),\n    defaultValues: {\n      nome: \"\",\n      email: \"\",\n      pedido: \"\",\n    },\n  });\n\n  const { data: publicPrayers = [], isLoading } = useQuery<PrayerRequest[]>({\n    queryKey: [\"/api/prayers/public\"],\n  });\n\n  const submitPrayerMutation = useMutation({\n    mutationFn: async (data: InsertPrayerRequest) => {\n      return await apiRequest<PrayerRequest>(\"POST\", \"/api/prayers\", data);\n    },\n    onSuccess: () => {\n      form.reset();\n      toast({\n        title: \"Pedido enviado!\",\n        description: \"Seu pedido de oração foi recebido e será analisado.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao enviar\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertPrayerRequest) => {\n    submitPrayerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center\">\n            <h1 className=\"font-sans text-5xl font-bold mb-4\">Pedidos de Oração</h1>\n            <p className=\"text-xl opacity-90\">\n              Compartilhe seus pedidos de oração conosco\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-12\">\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Prayer Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Send className=\"w-5 h-5\" />\n                Enviar Pedido de Oração\n              </CardTitle>\n              <CardDescription>\n                Preencha o formulário abaixo para enviar seu pedido\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"nome\">Nome*</Label>\n                  <Input\n                    id=\"nome\"\n                    placeholder=\"Seu nome\"\n                    {...form.register(\"nome\")}\n                    data-testid=\"input-prayer-name\"\n                  />\n                  {form.formState.errors.nome && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.nome.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email (opcional)</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"seu@email.com\"\n                    {...form.register(\"email\")}\n                    data-testid=\"input-prayer-email\"\n                  />\n                  {form.formState.errors.email && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"pedido\">Pedido de Oração*</Label>\n                  <Textarea\n                    id=\"pedido\"\n                    placeholder=\"Compartilhe seu pedido de oração...\"\n                    rows={6}\n                    {...form.register(\"pedido\")}\n                    data-testid=\"input-prayer-request\"\n                  />\n                  {form.formState.errors.pedido && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.pedido.message}</p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={submitPrayerMutation.isPending}\n                  data-testid=\"button-submit-prayer\"\n                >\n                  {submitPrayerMutation.isPending ? \"Enviando...\" : \"Enviar Pedido\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Public Prayers List */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"w-5 h-5 text-accent\" />\n                  Orações em Destaque\n                </CardTitle>\n                <CardDescription>\n                  Pedidos que a comunidade está acompanhando\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {isLoading ? (\n                  <p className=\"text-muted-foreground text-center py-8\">Carregando...</p>\n                ) : publicPrayers.length > 0 ? (\n                  publicPrayers.map((prayer) => (\n                    <Card key={prayer.id} className=\"bg-muted/50\" data-testid={`prayer-card-${prayer.id}`}>\n                      <CardHeader className=\"space-y-1 pb-2\">\n                        <CardTitle className=\"text-base\">{prayer.nome}</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {format(new Date(prayer.createdAt), \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR })}\n                        </p>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm\">{prayer.pedido}</p>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">\n                    Nenhum pedido público no momento\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6759},"client/src/pages/member-profile.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { User as UserIcon, Mail, Calendar, Briefcase, MapPin, Home } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport type { User } from \"@shared/schema\";\n\nexport default function MemberProfile() {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const userData = localStorage.getItem(\"user\");\n    if (userData) {\n      setUser(JSON.parse(userData));\n    }\n  }, []);\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-muted-foreground\">Carregando perfil...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-profile-title\">\n          Meu Perfil\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Suas informações de cadastro\n        </p>\n      </div>\n\n      <Card className=\"max-w-3xl\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-4 rounded-full bg-primary/10\">\n              <UserIcon className=\"w-12 h-12 text-primary\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl\" data-testid=\"text-profile-name\">{user.nome}</CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {user.isAdmin ? \"Administrador\" : \"Membro\"}\n              </p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6 pt-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-2 rounded-lg bg-muted\">\n                <Mail className=\"w-5 h-5 text-muted-foreground\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Email</p>\n                <p className=\"font-medium\" data-testid=\"text-profile-email\">{user.email}</p>\n              </div>\n            </div>\n\n            {user.dataNascimento && (\n              <div className=\"flex items-start gap-3\">\n                <div className=\"p-2 rounded-lg bg-muted\">\n                  <Calendar className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Data de Nascimento</p>\n                  <p className=\"font-medium\" data-testid=\"text-profile-birthdate\">\n                    {new Date(user.dataNascimento).toLocaleDateString('pt-BR')}\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {user.profissao && (\n              <div className=\"flex items-start gap-3\">\n                <div className=\"p-2 rounded-lg bg-muted\">\n                  <Briefcase className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Profissão</p>\n                  <p className=\"font-medium\" data-testid=\"text-profile-profession\">{user.profissao}</p>\n                </div>\n              </div>\n            )}\n\n            {user.cidade && (\n              <div className=\"flex items-start gap-3\">\n                <div className=\"p-2 rounded-lg bg-muted\">\n                  <MapPin className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Cidade</p>\n                  <p className=\"font-medium\" data-testid=\"text-profile-city\">\n                    {user.cidade}{user.bairro && ` - ${user.bairro}`}\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {user.endereco && (\n              <div className=\"flex items-start gap-3 md:col-span-2\">\n                <div className=\"p-2 rounded-lg bg-muted\">\n                  <Home className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Endereço</p>\n                  <p className=\"font-medium\" data-testid=\"text-profile-address\">{user.endereco}</p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"pt-4 border-t\">\n            <p className=\"text-sm text-muted-foreground\">\n              Para atualizar suas informações, entre em contato com a secretaria da igreja.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4593},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/member-layout.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport type { User } from \"@shared/schema\";\n\ninterface MemberLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function MemberLayout({ children }: MemberLayoutProps) {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const userData = localStorage.getItem(\"user\");\n    \n    if (!token || !userData) {\n      setLocation(\"/login\");\n      return;\n    }\n    \n    setUser(JSON.parse(userData));\n  }, [setLocation]);\n\n  if (!user) {\n    return null;\n  }\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar userNome={user.nome} isLider={user.isLider} />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n          </header>\n          <main className=\"flex-1 overflow-y-auto p-8 bg-background\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":1456},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/member-schedules.tsx":{"content":"import { useQuery, useQueries } from \"@tanstack/react-query\";\nimport type { Schedule, ScheduleAssignment, User } from \"@shared/schema\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Music, Users as UsersIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ScheduleWithAssignments extends Schedule {\n  assignments: (ScheduleAssignment & { user?: User })[];\n}\n\nconst POSICOES_LOUVOR = [\n  { key: \"teclado\", label: \"Teclado\" },\n  { key: \"violao\", label: \"Violão\" },\n  { key: \"baixo\", label: \"Baixo\" },\n  { key: \"bateria\", label: \"Bateria\" },\n  { key: \"voz\", label: \"Voz\" },\n  { key: \"backing\", label: \"Backing Vocal\" },\n];\n\nexport default function MemberSchedulesPage() {\n  const currentDate = new Date();\n  const [selectedMonth, setSelectedMonth] = useState(currentDate.getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(currentDate.getFullYear());\n\n  const { data: schedules = [], isLoading } = useQuery<Schedule[]>({\n    queryKey: [\"/api/schedules\", selectedMonth, selectedYear],\n  });\n\n  const { data: allUsers = [] } = useQuery<User[]>({\n    queryKey: [\"/api/admin/members\"],\n  });\n\n  // Fetch assignments for each schedule using useQueries\n  const scheduleDetailsQueries = useQueries({\n    queries: schedules.map(schedule => ({\n      queryKey: [\"/api/schedules/details\", schedule.id],\n      queryFn: async () => {\n        const response = await fetch(`/api/schedules/details/${schedule.id}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch schedule details\");\n        return response.json();\n      },\n      enabled: schedules.length > 0,\n    })),\n  });\n\n  const schedulesWithAssignments: ScheduleWithAssignments[] = schedules.map((schedule, index) => {\n    const details = scheduleDetailsQueries[index]?.data as any;\n    const assignments = details?.assignments || [];\n    \n    const assignmentsWithUsers = assignments.map((assignment: ScheduleAssignment) => ({\n      ...assignment,\n      user: allUsers.find(u => u.id === assignment.userId),\n    }));\n\n    return {\n      ...schedule,\n      assignments: assignmentsWithUsers,\n    };\n  });\n\n  const louvorSchedules = schedulesWithAssignments.filter(s => s.tipo === \"louvor\");\n  const obreirosSchedules = schedulesWithAssignments.filter(s => s.tipo === \"obreiros\");\n\n  const months = [\n    { value: 1, label: \"Janeiro\" },\n    { value: 2, label: \"Fevereiro\" },\n    { value: 3, label: \"Março\" },\n    { value: 4, label: \"Abril\" },\n    { value: 5, label: \"Maio\" },\n    { value: 6, label: \"Junho\" },\n    { value: 7, label: \"Julho\" },\n    { value: 8, label: \"Agosto\" },\n    { value: 9, label: \"Setembro\" },\n    { value: 10, label: \"Outubro\" },\n    { value: 11, label: \"Novembro\" },\n    { value: 12, label: \"Dezembro\" },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-schedules-title\">\n            Escalas\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Visualize as escalas de louvor e obreiros\n          </p>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <select\n            value={selectedMonth}\n            onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\n            className=\"px-3 py-2 border rounded-md\"\n            data-testid=\"select-month\"\n          >\n            {months.map(m => (\n              <option key={m.value} value={m.value}>{m.label}</option>\n            ))}\n          </select>\n          <select\n            value={selectedYear}\n            onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n            className=\"px-3 py-2 border rounded-md\"\n            data-testid=\"select-year\"\n          >\n            <option value={2024}>2024</option>\n            <option value={2025}>2025</option>\n            <option value={2026}>2026</option>\n          </select>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <p className=\"text-center text-muted-foreground py-8\">Carregando escalas...</p>\n      ) : (\n        <div className=\"space-y-8\">\n          {/* Escala de Louvor */}\n          <div>\n            <h2 className=\"font-sans text-2xl font-semibold mb-4 flex items-center gap-2\">\n              <Music className=\"w-6 h-6 text-primary\" />\n              Escala de Louvor\n            </h2>\n            {louvorSchedules.length > 0 ? (\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {louvorSchedules.map((schedule) => (\n                  <Card key={schedule.id}>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Calendar className=\"w-4 h-4\" />\n                        {format(new Date(schedule.data), \"dd 'de' MMMM\", { locale: ptBR })}\n                      </CardTitle>\n                      {schedule.observacoes && (\n                        <CardDescription>{schedule.observacoes}</CardDescription>\n                      )}\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {POSICOES_LOUVOR.map(posicao => {\n                          const assignment = schedule.assignments.find(a => a.posicao === posicao.key);\n                          return (\n                            <div key={posicao.key} className=\"flex justify-between items-center\">\n                              <span className=\"text-sm font-medium\">{posicao.label}:</span>\n                              {assignment?.user ? (\n                                <Badge variant=\"default\">{assignment.user.nome}</Badge>\n                              ) : (\n                                <Badge variant=\"outline\">Vazio</Badge>\n                              )}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  Nenhuma escala de louvor cadastrada para este mês\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Escala de Obreiros */}\n          <div>\n            <h2 className=\"font-sans text-2xl font-semibold mb-4 flex items-center gap-2\">\n              <UsersIcon className=\"w-6 h-6 text-primary\" />\n              Escala de Obreiros\n            </h2>\n            {obreirosSchedules.length > 0 ? (\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {obreirosSchedules.map((schedule) => (\n                  <Card key={schedule.id}>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Calendar className=\"w-4 h-4\" />\n                        {format(new Date(schedule.data), \"dd 'de' MMMM\", { locale: ptBR })}\n                      </CardTitle>\n                      {schedule.observacoes && (\n                        <CardDescription>{schedule.observacoes}</CardDescription>\n                      )}\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {schedule.assignments.map((assignment, idx) => (\n                          <div key={assignment.id} className=\"flex items-center gap-2\">\n                            <span className=\"text-sm\">Obreiro {idx + 1}:</span>\n                            {assignment.user ? (\n                              <Badge variant=\"default\">{assignment.user.nome}</Badge>\n                            ) : (\n                              <Badge variant=\"outline\">Não atribuído</Badge>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  Nenhuma escala de obreiros cadastrada para este mês\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8676},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/app-sidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { BookOpen, Video, GraduationCap, User, LogOut, Church, CalendarDays, Heart } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AppSidebarProps {\n  userNome?: string;\n  isLider?: boolean;\n}\n\nexport function AppSidebar({ userNome, isLider }: AppSidebarProps) {\n  const [location, setLocation] = useLocation();\n\n  const items = [\n    {\n      title: \"Dashboard\",\n      url: \"/membro\",\n      icon: Church,\n    },\n    {\n      title: \"Cursos\",\n      url: \"/membro/cursos\",\n      icon: GraduationCap,\n    },\n    {\n      title: \"Apostilas\",\n      url: \"/membro/apostilas\",\n      icon: BookOpen,\n    },\n    {\n      title: \"Vídeos\",\n      url: \"/membro/videos\",\n      icon: Video,\n    },\n    {\n      title: \"Pedidos de Oração\",\n      url: \"/membro/oracoes\",\n      icon: Heart,\n    },\n    {\n      title: \"Escalas\",\n      url: isLider ? \"/lider/escalas\" : \"/membro/escalas\",\n      icon: CalendarDays,\n    },\n    {\n      title: \"Perfil\",\n      url: \"/membro/perfil\",\n      icon: User,\n    },\n  ];\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setLocation(\"/\");\n  };\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6 border-b\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 rounded-lg bg-primary/10\">\n            <Church className=\"w-6 h-6 text-primary\" />\n          </div>\n          <div>\n            <h2 className=\"font-sans font-semibold text-lg\">Área do Membro</h2>\n            {userNome && (\n              <p className=\"text-sm text-muted-foreground\">Olá, {userNome}</p>\n            )}\n          </div>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Menu</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    onClick={() => setLocation(item.url)}\n                    isActive={location === item.url}\n                    data-testid={`link-${item.title.toLowerCase()}`}\n                  >\n                    <item.icon className=\"w-4 h-4\" />\n                    <span>{item.title}</span>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4 border-t\">\n        <Button\n          variant=\"ghost\"\n          className=\"w-full justify-start\"\n          onClick={handleLogout}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Sair\n        </Button>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":3073},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/member-courses.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { GraduationCap, PlayCircle, ChevronRight, CheckCircle, XCircle, Trophy } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { Course, Lesson, Question } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function MemberCourses() {\n  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);\n  const [selectedLesson, setSelectedLesson] = useState<Lesson | null>(null);\n  const [answers, setAnswers] = useState<(string | null)[]>([null, null, null]);\n  const [showResult, setShowResult] = useState(false);\n  const [quizResult, setQuizResult] = useState<{ score: number; completed: boolean; message: string } | null>(null);\n  const { toast } = useToast();\n\n  const { data: courses = [], isLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: courseLessons = [] } = useQuery<Lesson[]>({\n    queryKey: [\"/api/courses\", selectedCourse?.id, \"lessons\"],\n    enabled: !!selectedCourse,\n  });\n\n  const { data: lessonQuestions = [] } = useQuery<Question[]>({\n    queryKey: [\"/api/lessons\", selectedLesson?.id, \"questions\"],\n    enabled: !!selectedLesson,\n  });\n\n  const { data: lessonCompletion } = useQuery<{ completed: boolean; score: number }>({\n    queryKey: [\"/api/lessons\", selectedLesson?.id, \"completion\"],\n    enabled: !!selectedLesson,\n  });\n\n  const submitQuizMutation = useMutation({\n    mutationFn: async (data: { lessonId: number; respostas: string[] }) => {\n      return await apiRequest<{ score: number; completed: boolean; message: string }>(\n        \"POST\",\n        `/api/lessons/${data.lessonId}/complete`,\n        { respostas: data.respostas }\n      );\n    },\n    onSuccess: (data) => {\n      setQuizResult(data);\n      setShowResult(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons\", selectedLesson?.id, \"completion\"] });\n      \n      if (data.completed) {\n        toast({\n          title: \"Parabéns!\",\n          description: data.message,\n        });\n      } else {\n        toast({\n          title: \"Tente novamente\",\n          description: data.message,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao enviar respostas\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitQuiz = () => {\n    if (!selectedLesson) return;\n\n    // Validate all answers are filled\n    if (answers.some(a => a === null)) {\n      toast({\n        title: \"Complete todas as perguntas\",\n        description: \"Responda todas as 3 perguntas antes de enviar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitQuizMutation.mutate({\n      lessonId: selectedLesson.id,\n      respostas: answers as string[],\n    });\n  };\n\n  const resetQuizState = () => {\n    setAnswers([null, null, null]);\n    setShowResult(false);\n    setQuizResult(null);\n  };\n\n  const handleLessonChange = (lesson: Lesson) => {\n    resetQuizState();\n    setSelectedLesson(lesson);\n  };\n\n  const getYouTubeEmbedUrl = (url: string) => {\n    const videoId = url.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/)?.[1];\n    return videoId ? `https://www.youtube.com/embed/${videoId}` : url;\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-courses-title\">\n          Cursos\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Explore os cursos disponíveis e continue seu aprendizado\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"overflow-hidden\">\n              <div className=\"h-48 bg-muted animate-pulse\" />\n              <CardHeader>\n                <div className=\"h-6 bg-muted animate-pulse rounded mb-2\" />\n                <div className=\"h-4 bg-muted animate-pulse rounded\" />\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n      ) : courses.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {courses.map((course) => (\n            <Card\n              key={course.id}\n              className=\"overflow-hidden hover-elevate cursor-pointer\"\n              onClick={() => setSelectedCourse(course)}\n              data-testid={`card-course-${course.id}`}\n            >\n              {course.imagem ? (\n                <div className=\"h-48 overflow-hidden\">\n                  <img\n                    src={course.imagem}\n                    alt={course.nome}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              ) : (\n                <div className=\"h-48 bg-gradient-to-br from-primary/20 to-gold/20 flex items-center justify-center\">\n                  <GraduationCap className=\"w-16 h-16 text-primary/50\" />\n                </div>\n              )}\n              <CardHeader>\n                <CardTitle className=\"text-xl\">{course.nome}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-foreground/70 line-clamp-3 mb-4\">{course.descricao}</p>\n                <Button className=\"w-full\" data-testid={`button-view-course-${course.id}`}>\n                  Ver Aulas\n                  <ChevronRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-16\">\n          <div className=\"text-center\">\n            <GraduationCap className=\"w-20 h-20 mx-auto text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Nenhum curso disponível</h3>\n            <p className=\"text-muted-foreground\">\n              Novos cursos serão adicionados em breve\n            </p>\n          </div>\n        </Card>\n      )}\n\n      {/* Course Details Dialog */}\n      <Dialog open={!!selectedCourse} onOpenChange={() => setSelectedCourse(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">{selectedCourse?.nome}</DialogTitle>\n            <DialogDescription className=\"text-base\">\n              {selectedCourse?.descricao}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedLesson ? (\n            <div className=\"space-y-4\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setSelectedLesson(null)}\n                data-testid=\"button-back-to-lessons\"\n              >\n                ← Voltar para aulas\n              </Button>\n              <div className=\"aspect-video rounded-lg overflow-hidden bg-black\">\n                <iframe\n                  src={getYouTubeEmbedUrl(selectedLesson.videoUrl)}\n                  className=\"w-full h-full\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                  data-testid=\"video-player\"\n                />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">{selectedLesson.titulo}</h3>\n                <p className=\"text-foreground/70\">{selectedLesson.descricao}</p>\n              </div>\n\n              {/* Quiz Section */}\n              {lessonCompletion?.completed ? (\n                <Card className=\"bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800\" data-testid=\"quiz-completed\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-green-100 dark:bg-green-900\">\n                        <Trophy className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-green-900 dark:text-green-100 mb-1\">\n                          Lição Concluída!\n                        </h4>\n                        <p className=\"text-sm text-green-700 dark:text-green-300\">\n                          Você acertou {lessonCompletion.score}/3 perguntas e completou esta lição.\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : lessonQuestions.length === 3 ? (\n                <Card data-testid=\"quiz-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <GraduationCap className=\"w-5 h-5\" />\n                      Quiz de Validação\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Responda as 3 perguntas para completar esta lição\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {lessonQuestions.map((question, index) => (\n                      <div key={question.id} className=\"space-y-3\" data-testid={`quiz-question-${index + 1}`}>\n                        <Label className=\"text-base font-medium\">\n                          {index + 1}. {question.pergunta}\n                        </Label>\n                        <RadioGroup\n                          value={answers[index] || \"\"}\n                          onValueChange={(value) => {\n                            const newAnswers = [...answers];\n                            newAnswers[index] = value;\n                            setAnswers(newAnswers);\n                          }}\n                          disabled={showResult}\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"A\" id={`q${index}-A`} data-testid={`radio-q${index + 1}-a`} />\n                            <Label htmlFor={`q${index}-A`} className=\"cursor-pointer font-normal\">\n                              A) {question.opcaoA}\n                            </Label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"B\" id={`q${index}-B`} data-testid={`radio-q${index + 1}-b`} />\n                            <Label htmlFor={`q${index}-B`} className=\"cursor-pointer font-normal\">\n                              B) {question.opcaoB}\n                            </Label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"C\" id={`q${index}-C`} data-testid={`radio-q${index + 1}-c`} />\n                            <Label htmlFor={`q${index}-C`} className=\"cursor-pointer font-normal\">\n                              C) {question.opcaoC}\n                            </Label>\n                          </div>\n                        </RadioGroup>\n                      </div>\n                    ))}\n\n                    {showResult && quizResult && (\n                      <Card className={quizResult.completed ? \"bg-green-50 dark:bg-green-950\" : \"bg-amber-50 dark:bg-amber-950\"} data-testid=\"quiz-result\">\n                        <CardContent className=\"pt-6\">\n                          <div className=\"flex items-start gap-4\">\n                            {quizResult.completed ? (\n                              <CheckCircle className=\"w-6 h-6 text-green-600 dark:text-green-400 mt-1\" />\n                            ) : (\n                              <XCircle className=\"w-6 h-6 text-amber-600 dark:text-amber-400 mt-1\" />\n                            )}\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold mb-1\">{quizResult.message}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Você acertou {quizResult.score} de 3 perguntas.\n                              </p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    <div className=\"flex justify-end gap-2 pt-4\">\n                      {showResult && !quizResult?.completed && (\n                        <Button\n                          variant=\"outline\"\n                          onClick={resetQuizState}\n                          data-testid=\"button-try-again\"\n                        >\n                          Tentar Novamente\n                        </Button>\n                      )}\n                      {!showResult && (\n                        <Button\n                          onClick={handleSubmitQuiz}\n                          disabled={submitQuizMutation.isPending}\n                          data-testid=\"button-submit-quiz\"\n                        >\n                          {submitQuizMutation.isPending ? \"Enviando...\" : \"Enviar Respostas\"}\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card className=\"bg-amber-50 dark:bg-amber-950 border-amber-200 dark:border-amber-800\" data-testid=\"quiz-not-configured\">\n                  <CardContent className=\"pt-6\">\n                    <p className=\"text-sm text-amber-800 dark:text-amber-200\">\n                      O quiz desta lição ainda não foi configurado pelo administrador.\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Aulas do Curso</h3>\n              {courseLessons.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {courseLessons\n                    .sort((a, b) => a.ordem - b.ordem)\n                    .map((lesson, index) => (\n                      <Card\n                        key={lesson.id}\n                        className=\"hover-elevate cursor-pointer\"\n                        onClick={() => handleLessonChange(lesson)}\n                        data-testid={`card-lesson-${lesson.id}`}\n                      >\n                        <CardHeader className=\"flex flex-row items-center gap-4 space-y-0 p-4\">\n                          <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-primary/10 text-primary font-semibold\">\n                            {index + 1}\n                          </div>\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-base\">{lesson.titulo}</CardTitle>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {lesson.descricao}\n                            </p>\n                          </div>\n                          <PlayCircle className=\"w-6 h-6 text-primary\" />\n                        </CardHeader>\n                      </Card>\n                    ))}\n                </div>\n              ) : (\n                <Card className=\"p-8\">\n                  <div className=\"text-center\">\n                    <PlayCircle className=\"w-12 h-12 mx-auto text-muted-foreground/50 mb-3\" />\n                    <p className=\"text-muted-foreground\">Nenhuma aula cadastrada ainda</p>\n                  </div>\n                </Card>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":16298},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertEventSchema, insertCourseSchema, insertLessonSchema, insertMaterialSchema, insertPrayerRequestSchema, loginSchema, insertScheduleSchema, insertScheduleAssignmentSchema, insertQuestionSchema } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\n\nconst JWT_SECRET = process.env.SESSION_SECRET || \"your-secret-key-change-in-production\";\n\n// Middleware to verify JWT token\nasync function authenticateToken(req: Request, res: Response, next: NextFunction) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Token não fornecido\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n    const user = await storage.getUserById(decoded.userId);\n    \n    if (!user) {\n      return res.status(403).json({ message: \"Usuário não encontrado\" });\n    }\n    \n    (req as any).userId = decoded.userId;\n    (req as any).user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: \"Token inválido\" });\n  }\n}\n\n// Middleware to check if user is admin\nasync function requireAdmin(req: Request, res: Response, next: NextFunction) {\n  const userId = (req as any).userId;\n  const user = await storage.getUserById(userId);\n  \n  if (!user || !user.isAdmin) {\n    return res.status(403).json({ message: \"Acesso negado. Requer permissões de administrador.\" });\n  }\n  \n  next();\n}\n\nexport function registerRoutes(app: Express) {\n  // Auth Routes\n  app.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n    try {\n      const credentials = loginSchema.parse(req.body);\n      const user = await storage.getUserByEmail(credentials.email);\n\n      if (!user) {\n        return res.status(401).json({ message: \"Email ou senha inválidos\" });\n      }\n\n      const isPasswordValid = await bcrypt.compare(credentials.senha, user.senha);\n      if (!isPasswordValid) {\n        return res.status(401).json({ message: \"Email ou senha inválidos\" });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n\n      const { senha, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, token });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Erro ao fazer login\" });\n    }\n  });\n\n  // Public Routes\n  app.get(\"/api/events/public\", async (req: Request, res: Response) => {\n    try {\n      const events = await storage.getPublicEvents();\n      res.json(events);\n    } catch (error) {\n      console.error(\"Get public events error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar eventos\" });\n    }\n  });\n\n  // Member Routes (Authenticated)\n  app.get(\"/api/courses\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const courses = await storage.getAllCourses();\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Get courses error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar cursos\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id/lessons\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const lessons = await storage.getLessonsByCourseId(courseId);\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Get lessons error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar aulas\" });\n    }\n  });\n\n  app.get(\"/api/materials\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const materials = await storage.getAllMaterials();\n      res.json(materials);\n    } catch (error) {\n      console.error(\"Get materials error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar materiais\" });\n    }\n  });\n\n  // Members list (accessible by leaders and admins)\n  app.get(\"/api/admin/members\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const user = (req as any).user;\n      \n      // Only leaders and admins can access\n      if (!user.isLider && !user.isAdmin) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n      \n      const users = await storage.getAllUsers();\n      const usersWithoutPasswords = users.map(({ senha, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      console.error(\"Get members error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar membros\" });\n    }\n  });\n\n  app.post(\"/api/admin/members\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const existingUser = await storage.getUserByEmail(userData.email);\n      \n      if (existingUser) {\n        return res.status(400).json({ message: \"Email já cadastrado\" });\n      }\n\n      const newUser = await storage.createUser(userData);\n      const { senha, ...userWithoutPassword } = newUser;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create member error:\", error);\n      res.status(500).json({ message: \"Erro ao criar membro\" });\n    }\n  });\n\n  app.patch(\"/api/admin/members/:id\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      // Create a partial schema for updates (senha is optional)\n      const updateSchema = insertUserSchema.partial();\n      const userData = updateSchema.parse(req.body);\n      \n      // Sanitize empty strings to undefined for optional fields\n      const sanitizedData = Object.fromEntries(\n        Object.entries(userData).map(([key, value]) => {\n          // Convert empty strings to undefined for optional fields\n          if (value === \"\" && key !== \"nome\" && key !== \"email\") {\n            return [key, undefined];\n          }\n          return [key, value];\n        })\n      );\n      \n      const updatedUser = await storage.updateUser(id, sanitizedData);\n      const { senha, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Update member error:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar membro\" });\n    }\n  });\n\n  app.patch(\"/api/admin/members/:id/toggle-admin\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { isAdmin } = req.body;\n      \n      const updatedUser = await storage.updateUserAdmin(id, isAdmin);\n      const { senha, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Toggle admin error:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar permissões\" });\n    }\n  });\n\n  app.delete(\"/api/admin/members/:id\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteUser(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete member error:\", error);\n      res.status(500).json({ message: \"Erro ao deletar membro\" });\n    }\n  });\n\n  // Admin Routes - Courses\n  app.post(\"/api/admin/courses\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const courseData = insertCourseSchema.parse(req.body);\n      const newCourse = await storage.createCourse(courseData);\n      res.status(201).json(newCourse);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create course error:\", error);\n      res.status(500).json({ message: \"Erro ao criar curso\" });\n    }\n  });\n\n  app.delete(\"/api/admin/courses/:id\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteCourse(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete course error:\", error);\n      res.status(500).json({ message: \"Erro ao deletar curso\" });\n    }\n  });\n\n  // Admin Routes - Lessons\n  app.post(\"/api/admin/lessons\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const lessonData = insertLessonSchema.parse(req.body);\n      const newLesson = await storage.createLesson(lessonData);\n      res.status(201).json(newLesson);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create lesson error:\", error);\n      res.status(500).json({ message: \"Erro ao criar aula\" });\n    }\n  });\n\n  app.delete(\"/api/admin/lessons/:id\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteLesson(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete lesson error:\", error);\n      res.status(500).json({ message: \"Erro ao deletar aula\" });\n    }\n  });\n\n  // Admin Routes - Events\n  app.get(\"/api/admin/events\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const events = await storage.getAllEvents();\n      res.json(events);\n    } catch (error) {\n      console.error(\"Get events error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar eventos\" });\n    }\n  });\n\n  app.post(\"/api/admin/events\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const eventData = insertEventSchema.parse(req.body);\n      const newEvent = await storage.createEvent(eventData);\n      res.status(201).json(newEvent);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create event error:\", error);\n      res.status(500).json({ message: \"Erro ao criar evento\" });\n    }\n  });\n\n  app.delete(\"/api/admin/events/:id\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteEvent(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete event error:\", error);\n      res.status(500).json({ message: \"Erro ao deletar evento\" });\n    }\n  });\n\n  // Admin Routes - Materials\n  app.post(\"/api/admin/materials\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const materialData = insertMaterialSchema.parse(req.body);\n      const newMaterial = await storage.createMaterial(materialData);\n      res.status(201).json(newMaterial);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create material error:\", error);\n      res.status(500).json({ message: \"Erro ao criar material\" });\n    }\n  });\n\n  app.delete(\"/api/admin/materials/:id\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteMaterial(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete material error:\", error);\n      res.status(500).json({ message: \"Erro ao deletar material\" });\n    }\n  });\n\n  // Prayer Request Routes\n  app.post(\"/api/prayers\", async (req: Request, res: Response) => {\n    try {\n      const prayerData = insertPrayerRequestSchema.parse(req.body);\n      const newPrayer = await storage.createPrayerRequest(prayerData);\n      res.status(201).json(newPrayer);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create prayer request error:\", error);\n      res.status(500).json({ message: \"Erro ao criar pedido de oração\" });\n    }\n  });\n\n  app.get(\"/api/prayers/public\", async (req: Request, res: Response) => {\n    try {\n      const prayers = await storage.getPublicPrayerRequests();\n      res.json(prayers);\n    } catch (error) {\n      console.error(\"Get public prayers error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar pedidos de oração\" });\n    }\n  });\n\n  app.get(\"/api/admin/prayers\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const prayers = await storage.getAllPrayerRequests();\n      res.json(prayers);\n    } catch (error) {\n      console.error(\"Get all prayers error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar pedidos de oração\" });\n    }\n  });\n\n  app.patch(\"/api/admin/prayers/:id\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateSchema = z.object({\n        status: z.enum([\"pending\", \"approved\", \"archived\"]),\n        isPublic: z.boolean(),\n      });\n      const { status, isPublic } = updateSchema.parse(req.body);\n      const updatedPrayer = await storage.updatePrayerRequestStatus(id, status, isPublic);\n      res.json(updatedPrayer);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Update prayer status error:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar pedido\" });\n    }\n  });\n\n  app.delete(\"/api/admin/prayers/:id\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePrayerRequest(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete prayer error:\", error);\n      res.status(500).json({ message: \"Erro ao deletar pedido\" });\n    }\n  });\n\n  // Analytics Routes\n  app.get(\"/api/admin/analytics/members\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const analytics = await storage.getMemberAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Get analytics error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar analytics\" });\n    }\n  });\n\n  // Schedule Routes (for leaders and members)\n  const requireLeader = (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user?.isLider && !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Acesso negado. Apenas líderes podem acessar.\" });\n    }\n    next();\n  };\n\n  // Get all schedules (members can view)\n  app.get(\"/api/schedules\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const schedules = await storage.getAllSchedules();\n      res.json(schedules);\n    } catch (error) {\n      console.error(\"Get schedules error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar escalas\" });\n    }\n  });\n\n  // Get schedule with assignments (must come before /:mes/:ano route)\n  app.get(\"/api/schedules/details/:id\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const schedule = await storage.getScheduleById(id);\n      if (!schedule) {\n        return res.status(404).json({ message: \"Escala não encontrada\" });\n      }\n      const assignments = await storage.getAssignmentsBySchedule(id);\n      res.json({ schedule, assignments });\n    } catch (error) {\n      console.error(\"Get schedule details error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar detalhes da escala\" });\n    }\n  });\n\n  // Get schedules by month\n  app.get(\"/api/schedules/:mes/:ano\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const mes = parseInt(req.params.mes);\n      const ano = parseInt(req.params.ano);\n      const schedules = await storage.getSchedulesByMonth(mes, ano);\n      res.json(schedules);\n    } catch (error) {\n      console.error(\"Get schedules by month error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar escalas\" });\n    }\n  });\n\n  // Create schedule (leaders only)\n  app.post(\"/api/schedules\", authenticateToken, requireLeader, async (req: Request, res: Response) => {\n    try {\n      const scheduleData = insertScheduleSchema.parse(req.body);\n      const newSchedule = await storage.createSchedule(scheduleData);\n      res.status(201).json(newSchedule);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create schedule error:\", error);\n      res.status(500).json({ message: \"Erro ao criar escala\" });\n    }\n  });\n\n  // Update schedule (leaders only)\n  app.patch(\"/api/schedules/:id\", authenticateToken, requireLeader, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      const updatedSchedule = await storage.updateSchedule(id, updateData);\n      res.json(updatedSchedule);\n    } catch (error) {\n      console.error(\"Update schedule error:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar escala\" });\n    }\n  });\n\n  // Delete schedule (leaders only)\n  app.delete(\"/api/schedules/:id\", authenticateToken, requireLeader, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteSchedule(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete schedule error:\", error);\n      res.status(500).json({ message: \"Erro ao deletar escala\" });\n    }\n  });\n\n  // Create assignment (leaders only)\n  app.post(\"/api/assignments\", authenticateToken, requireLeader, async (req: Request, res: Response) => {\n    try {\n      const assignmentData = insertScheduleAssignmentSchema.parse(req.body);\n      const newAssignment = await storage.createAssignment(assignmentData);\n      res.status(201).json(newAssignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create assignment error:\", error);\n      res.status(500).json({ message: \"Erro ao criar atribuição\" });\n    }\n  });\n\n  // Update assignment (leaders only)\n  app.patch(\"/api/assignments/:id\", authenticateToken, requireLeader, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { userId } = req.body;\n      const updatedAssignment = await storage.updateAssignment(id, userId);\n      res.json(updatedAssignment);\n    } catch (error) {\n      console.error(\"Update assignment error:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar atribuição\" });\n    }\n  });\n\n  // Get users by ministry (for suggestions)\n  app.get(\"/api/users/ministry/:ministerio\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const ministerio = req.params.ministerio;\n      const users = await storage.getUsersByMinistry(ministerio);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Get users by ministry error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar membros\" });\n    }\n  });\n\n  // Update user ministry (admin only)\n  app.patch(\"/api/admin/members/:id/ministry\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { ministerio, isLider } = req.body;\n      const updatedUser = await storage.updateUserMinistry(id, ministerio, isLider);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Update user ministry error:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar ministério\" });\n    }\n  });\n\n  // ========== QUIZ ROUTES ==========\n  \n  // Get questions for a lesson (authenticated)\n  app.get(\"/api/lessons/:id/questions\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const lessonId = parseInt(req.params.id);\n      const questions = await storage.getQuestionsByLessonId(lessonId);\n      res.json(questions);\n    } catch (error) {\n      console.error(\"Get questions error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar perguntas\" });\n    }\n  });\n\n  // Create questions for a lesson (admin only)\n  app.post(\"/api/admin/lessons/:id/questions\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const lessonId = parseInt(req.params.id);\n      const { questions: questionsData } = req.body;\n\n      if (!Array.isArray(questionsData) || questionsData.length !== 3) {\n        return res.status(400).json({ message: \"São necessárias exatamente 3 perguntas\" });\n      }\n\n      // Validate ALL questions first before making any changes\n      const validatedQuestions = [];\n      for (let i = 0; i < questionsData.length; i++) {\n        const questionData = insertQuestionSchema.parse({\n          ...questionsData[i],\n          lessonId,\n          ordem: i + 1,\n        });\n        validatedQuestions.push(questionData);\n      }\n\n      // Only after ALL validations pass, delete existing and insert new ones\n      await storage.deleteQuestionsByLessonId(lessonId);\n\n      const createdQuestions = [];\n      for (const questionData of validatedQuestions) {\n        const question = await storage.createQuestion(questionData);\n        createdQuestions.push(question);\n      }\n\n      res.status(201).json(createdQuestions);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Dados inválidos\", errors: error.errors });\n      }\n      console.error(\"Create questions error:\", error);\n      res.status(500).json({ message: \"Erro ao criar perguntas\" });\n    }\n  });\n\n  // Submit quiz answers and complete lesson (members)\n  app.post(\"/api/lessons/:id/complete\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const lessonId = parseInt(req.params.id);\n      const userId = (req as any).userId;\n      const { respostas } = req.body; // Array of answers: ['A', 'B', 'C']\n\n      if (!Array.isArray(respostas) || respostas.length !== 3) {\n        return res.status(400).json({ message: \"São necessárias 3 respostas\" });\n      }\n\n      // Get questions for this lesson\n      const questions = await storage.getQuestionsByLessonId(lessonId);\n      \n      if (questions.length !== 3) {\n        return res.status(400).json({ message: \"Este vídeo ainda não possui quiz configurado\" });\n      }\n\n      // Calculate score\n      let score = 0;\n      for (let i = 0; i < 3; i++) {\n        if (respostas[i] === questions[i].respostaCorreta) {\n          score++;\n        }\n      }\n\n      const completed = score === 3; // Must get all correct to complete\n\n      // Save completion\n      const completion = await storage.createOrUpdateLessonCompletion(\n        userId,\n        lessonId,\n        score,\n        completed\n      );\n\n      res.json({\n        score,\n        completed,\n        totalQuestions: 3,\n        message: completed \n          ? \"Parabéns! Você completou esta lição.\" \n          : `Você acertou ${score} de 3 perguntas. Tente novamente para completar.`,\n      });\n    } catch (error) {\n      console.error(\"Complete lesson error:\", error);\n      res.status(500).json({ message: \"Erro ao processar respostas\" });\n    }\n  });\n\n  // Get course progress for current user\n  app.get(\"/api/courses/:id/progress\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const userId = (req as any).userId;\n      const progress = await storage.getCourseProgress(userId, courseId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Get course progress error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar progresso\" });\n    }\n  });\n\n  // Get lesson completion status for user\n  app.get(\"/api/lessons/:id/completion\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const lessonId = parseInt(req.params.id);\n      const userId = (req as any).userId;\n      const completion = await storage.getLessonCompletion(userId, lessonId);\n      res.json(completion || { completed: false, score: 0 });\n    } catch (error) {\n      console.error(\"Get lesson completion error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar conclusão\" });\n    }\n  });\n\n  // Get all users progress for a course (admin only)\n  app.get(\"/api/admin/courses/:id/progress\", authenticateToken, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const allProgress = await storage.getAllUsersProgress(courseId);\n      res.json(allProgress);\n    } catch (error) {\n      console.error(\"Get all users progress error:\", error);\n      res.status(500).json({ message: \"Erro ao buscar progresso dos usuários\" });\n    }\n  });\n}\n","size_bytes":25705},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/create-admin.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nasync function createAdmin() {\n  try {\n    const hashedPassword = await bcrypt.hash(\"B38adec6$@\", 10);\n    \n    const [admin] = await db.insert(users).values({\n      nome: \"Jheferson\",\n      email: \"jhefersonlv@hotmail.com\",\n      senha: hashedPassword,\n      isAdmin: true,\n    }).returning();\n    \n    console.log(\"✅ Usuário admin criado com sucesso!\");\n    console.log(\"Email:\", admin.email);\n    console.log(\"Nome:\", admin.nome);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"❌ Erro ao criar admin:\", error);\n    process.exit(1);\n  }\n}\n\ncreateAdmin();\n","size_bytes":679},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/pages/admin-prayers.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { PrayerRequest } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Check, Eye, EyeOff, Trash2 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function AdminPrayersPage() {\n  const { toast } = useToast();\n\n  const { data: prayers = [], isLoading } = useQuery<PrayerRequest[]>({\n    queryKey: [\"/api/admin/prayers\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status, isPublic }: { id: number; status: string; isPublic: boolean }) => {\n      return await apiRequest<PrayerRequest>(\"PATCH\", `/api/admin/prayers/${id}`, { status, isPublic });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/prayers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/prayers/public\"] });\n      toast({\n        title: \"Status atualizado\",\n        description: \"O pedido foi atualizado com sucesso.\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/prayers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/prayers\"] });\n      toast({\n        title: \"Pedido removido\",\n        description: \"O pedido foi removido do sistema.\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, { label: string; variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\" }> = {\n      pending: { label: \"Pendente\", variant: \"secondary\" },\n      approved: { label: \"Aprovado\", variant: \"default\" },\n      archived: { label: \"Arquivado\", variant: \"outline\" },\n    };\n    const config = variants[status] || variants.pending;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-prayers-title\">\n          Gerenciar Pedidos de Oração\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          {prayers.length} pedidos cadastrados\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Todos os Pedidos</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {isLoading ? (\n            <div className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">Carregando pedidos...</p>\n            </div>\n          ) : prayers.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nome</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Pedido</TableHead>\n                  <TableHead>Data</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Público</TableHead>\n                  <TableHead className=\"text-right\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {prayers.map((prayer) => (\n                  <TableRow key={prayer.id} data-testid={`prayer-row-${prayer.id}`}>\n                    <TableCell className=\"font-medium\">{prayer.nome}</TableCell>\n                    <TableCell>{prayer.email || \"-\"}</TableCell>\n                    <TableCell className=\"max-w-xs truncate\">{prayer.pedido}</TableCell>\n                    <TableCell>\n                      {format(new Date(prayer.createdAt), \"dd/MM/yyyy\", { locale: ptBR })}\n                    </TableCell>\n                    <TableCell>{getStatusBadge(prayer.status)}</TableCell>\n                    <TableCell>\n                      {prayer.isPublic ? (\n                        <Badge variant=\"default\"><Eye className=\"w-3 h-3\" /></Badge>\n                      ) : (\n                        <Badge variant=\"outline\"><EyeOff className=\"w-3 h-3\" /></Badge>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex gap-2 justify-end\">\n                        {prayer.status === \"pending\" && (\n                          <>\n                            <Button\n                              size=\"sm\"\n                              variant=\"default\"\n                              onClick={() => updateStatusMutation.mutate({\n                                id: prayer.id,\n                                status: \"approved\",\n                                isPublic: true,\n                              })}\n                              data-testid={`button-approve-${prayer.id}`}\n                            >\n                              <Check className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => updateStatusMutation.mutate({\n                                id: prayer.id,\n                                status: \"approved\",\n                                isPublic: false,\n                              })}\n                              data-testid={`button-approve-private-${prayer.id}`}\n                            >\n                              <Check className=\"w-4 h-4 mr-1\" />\n                              Privado\n                            </Button>\n                          </>\n                        )}\n                        {prayer.status === \"approved\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updateStatusMutation.mutate({\n                              id: prayer.id,\n                              status: \"archived\",\n                              isPublic: false,\n                            })}\n                            data-testid={`button-archive-${prayer.id}`}\n                          >\n                            Arquivar\n                          </Button>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => deleteMutation.mutate(prayer.id)}\n                          data-testid={`button-delete-${prayer.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">Nenhum pedido de oração cadastrado</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7274},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Prayers from \"@/pages/prayers\";\nimport MemberPrayers from \"@/pages/member-prayers\";\nimport { MemberLayout } from \"@/components/member-layout\";\nimport { AdminLayout } from \"@/components/admin-layout\";\nimport MemberDashboard from \"@/pages/member-dashboard\";\nimport MemberCourses from \"@/pages/member-courses\";\nimport MemberMaterials from \"@/pages/member-materials\";\nimport MemberVideos from \"@/pages/member-videos\";\nimport MemberProfile from \"@/pages/member-profile\";\nimport MemberSchedules from \"@/pages/member-schedules\";\nimport LeaderSchedules from \"@/pages/leader-schedules\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport AdminMembers from \"@/pages/admin-members\";\nimport AdminCourses from \"@/pages/admin-courses\";\nimport AdminEvents from \"@/pages/admin-events\";\nimport AdminMaterials from \"@/pages/admin-materials\";\nimport AdminPrayers from \"@/pages/admin-prayers\";\nimport AdminAnalytics from \"@/pages/admin-analytics\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public Routes */}\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/oracoes\" component={Prayers} />\n      \n      {/* Member Routes */}\n      <Route path=\"/membro\">\n        <MemberLayout>\n          <MemberDashboard />\n        </MemberLayout>\n      </Route>\n      <Route path=\"/membro/cursos\">\n        <MemberLayout>\n          <MemberCourses />\n        </MemberLayout>\n      </Route>\n      <Route path=\"/membro/apostilas\">\n        <MemberLayout>\n          <MemberMaterials />\n        </MemberLayout>\n      </Route>\n      <Route path=\"/membro/videos\">\n        <MemberLayout>\n          <MemberVideos />\n        </MemberLayout>\n      </Route>\n      <Route path=\"/membro/perfil\">\n        <MemberLayout>\n          <MemberProfile />\n        </MemberLayout>\n      </Route>\n      <Route path=\"/membro/oracoes\">\n        <MemberLayout>\n          <MemberPrayers />\n        </MemberLayout>\n      </Route>\n      <Route path=\"/membro/escalas\">\n        <MemberLayout>\n          <MemberSchedules />\n        </MemberLayout>\n      </Route>\n      <Route path=\"/lider/escalas\">\n        <MemberLayout>\n          <LeaderSchedules />\n        </MemberLayout>\n      </Route>\n      \n      {/* Admin Routes */}\n      <Route path=\"/admin\">\n        <AdminLayout>\n          <AdminDashboard />\n        </AdminLayout>\n      </Route>\n      <Route path=\"/admin/members\">\n        <AdminLayout>\n          <AdminMembers />\n        </AdminLayout>\n      </Route>\n      <Route path=\"/admin/courses\">\n        <AdminLayout>\n          <AdminCourses />\n        </AdminLayout>\n      </Route>\n      <Route path=\"/admin/events\">\n        <AdminLayout>\n          <AdminEvents />\n        </AdminLayout>\n      </Route>\n      <Route path=\"/admin/materials\">\n        <AdminLayout>\n          <AdminMaterials />\n        </AdminLayout>\n      </Route>\n      <Route path=\"/admin/prayers\">\n        <AdminLayout>\n          <AdminPrayers />\n        </AdminLayout>\n      </Route>\n      <Route path=\"/admin/analytics\">\n        <AdminLayout>\n          <AdminAnalytics />\n        </AdminLayout>\n      </Route>\n      \n      {/* 404 Fallback */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Router />\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3778},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/admin-materials.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { BookOpen, Plus, Trash2, Video, FileText } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { Material, InsertMaterial } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertMaterialSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function AdminMaterials() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [materialType, setMaterialType] = useState<\"pdf\" | \"video\">(\"pdf\");\n  const { toast } = useToast();\n\n  const { data: materials = [], isLoading } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  const form = useForm<InsertMaterial>({\n    resolver: zodResolver(insertMaterialSchema),\n    defaultValues: {\n      titulo: \"\",\n      descricao: \"\",\n      arquivoUrl: \"\",\n      tipo: \"pdf\",\n    },\n  });\n\n  const createMaterialMutation = useMutation({\n    mutationFn: async (data: InsertMaterial) => {\n      return await apiRequest<Material>(\"POST\", \"/api/admin/materials\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Material criado com sucesso!\",\n        description: \"O novo material foi adicionado ao sistema.\",\n      });\n      setIsCreateOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar material\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMaterialMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/materials/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/materials\"] });\n      toast({\n        title: \"Material removido\",\n        description: \"O material foi removido do sistema.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertMaterial) => {\n    createMaterialMutation.mutate({\n      ...data,\n      tipo: materialType,\n    });\n  };\n\n  const pdfs = materials.filter(m => m.tipo === \"pdf\");\n  const videos = materials.filter(m => m.tipo === \"video\");\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-materials-title\">\n            Gerenciar Materiais\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            {materials.length} materiais cadastrados\n          </p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-material\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Novo Material\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Adicionar Novo Material</DialogTitle>\n              <DialogDescription>\n                Preencha as informações do material\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tipo\">Tipo de Material *</Label>\n                <Select value={materialType} onValueChange={(v) => setMaterialType(v as \"pdf\" | \"video\")}>\n                  <SelectTrigger id=\"tipo\" data-testid=\"select-material-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pdf\">PDF / Apostila</SelectItem>\n                    <SelectItem value=\"video\">Vídeo do YouTube</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"titulo\">Título *</Label>\n                <Input id=\"titulo\" {...form.register(\"titulo\")} data-testid=\"input-material-title\" />\n                {form.formState.errors.titulo && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.titulo.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"descricao\">Descrição</Label>\n                <Textarea\n                  id=\"descricao\"\n                  rows={3}\n                  {...form.register(\"descricao\")}\n                  data-testid=\"textarea-material-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"arquivoUrl\">\n                  {materialType === \"pdf\" ? \"URL do PDF *\" : \"URL do Vídeo do YouTube *\"}\n                </Label>\n                <Input\n                  id=\"arquivoUrl\"\n                  placeholder={materialType === \"pdf\" ? \"https://example.com/file.pdf\" : \"https://www.youtube.com/watch?v=...\"}\n                  {...form.register(\"arquivoUrl\")}\n                  data-testid=\"input-material-url\"\n                />\n                {form.formState.errors.arquivoUrl && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.arquivoUrl.message}</p>\n                )}\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={createMaterialMutation.isPending} data-testid=\"button-submit-material\">\n                  {createMaterialMutation.isPending ? \"Criando...\" : \"Criar Material\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"pdf\" className=\"w-full\">\n        <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n          <TabsTrigger value=\"pdf\" data-testid=\"tab-pdfs\">\n            <FileText className=\"w-4 h-4 mr-2\" />\n            PDFs ({pdfs.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"video\" data-testid=\"tab-videos\">\n            <Video className=\"w-4 h-4 mr-2\" />\n            Vídeos ({videos.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pdf\" className=\"mt-6\">\n          {pdfs.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {pdfs.map((material) => (\n                <Card key={material.id} className=\"hover-elevate\" data-testid={`card-pdf-${material.id}`}>\n                  <CardHeader className=\"flex flex-row items-start gap-4 space-y-0\">\n                    <div className=\"p-3 rounded-lg bg-primary/10 shrink-0\">\n                      <FileText className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg mb-2\">{material.titulo}</CardTitle>\n                      {material.descricao && (\n                        <p className=\"text-sm text-muted-foreground\">{material.descricao}</p>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={() => {\n                        if (confirm(`Tem certeza que deseja remover ${material.titulo}?`)) {\n                          deleteMaterialMutation.mutate(material.id);\n                        }\n                      }}\n                      data-testid={`button-delete-pdf-${material.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Remover\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"p-12\">\n              <div className=\"text-center\">\n                <FileText className=\"w-16 h-16 mx-auto text-muted-foreground/50 mb-4\" />\n                <p className=\"text-lg text-muted-foreground\">Nenhum PDF cadastrado</p>\n              </div>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"video\" className=\"mt-6\">\n          {videos.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {videos.map((material) => (\n                <Card key={material.id} className=\"overflow-hidden hover-elevate\" data-testid={`card-video-${material.id}`}>\n                  <div className=\"h-40 bg-gradient-to-br from-primary/20 to-gold/20 flex items-center justify-center\">\n                    <Video className=\"w-12 h-12 text-primary/50\" />\n                  </div>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{material.titulo}</CardTitle>\n                    {material.descricao && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">{material.descricao}</p>\n                    )}\n                  </CardHeader>\n                  <CardContent>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={() => {\n                        if (confirm(`Tem certeza que deseja remover ${material.titulo}?`)) {\n                          deleteMaterialMutation.mutate(material.id);\n                        }\n                      }}\n                      data-testid={`button-delete-video-${material.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Remover\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"p-12\">\n              <div className=\"text-center\">\n                <Video className=\"w-16 h-16 mx-auto text-muted-foreground/50 mb-4\" />\n                <p className=\"text-lg text-muted-foreground\">Nenhum vídeo cadastrado</p>\n              </div>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":11042},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/leader-schedules.tsx":{"content":"import { useQuery, useMutation, useQueries } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Schedule, ScheduleAssignment, User, InsertSchedule } from \"@shared/schema\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Calendar, Trash2, Save } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ninterface ScheduleWithAssignments extends Schedule {\n  assignments: (ScheduleAssignment & { user?: User })[];\n}\n\nconst POSICOES_LOUVOR = [\"teclado\", \"violao\", \"baixo\", \"bateria\", \"voz\", \"backing\"];\nconst POSICOES_LABELS: Record<string, string> = {\n  teclado: \"Teclado\",\n  violao: \"Violão\",\n  baixo: \"Baixo\",\n  bateria: \"Bateria\",\n  voz: \"Voz\",\n  backing: \"Backing Vocal\",\n};\n\nconst scheduleFormSchema = z.object({\n  mes: z.number().min(1).max(12),\n  ano: z.number().min(2024),\n  tipo: z.enum([\"louvor\", \"obreiros\"]),\n  data: z.string(),\n  observacoes: z.string().optional(),\n});\n\ntype ScheduleFormData = z.infer<typeof scheduleFormSchema>;\n\nexport default function LeaderSchedulesPage() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingSchedule, setEditingSchedule] = useState<number | null>(null);\n  const [assignments, setAssignments] = useState<Record<string, number | null>>({});\n\n  const currentDate = new Date();\n  const [selectedMonth] = useState(currentDate.getMonth() + 1);\n  const [selectedYear] = useState(currentDate.getFullYear());\n\n  const form = useForm<ScheduleFormData>({\n    resolver: zodResolver(scheduleFormSchema),\n    defaultValues: {\n      mes: selectedMonth,\n      ano: selectedYear,\n      tipo: \"louvor\",\n      data: \"\",\n      observacoes: \"\",\n    },\n  });\n\n  const { data: schedules = [], isLoading } = useQuery<Schedule[]>({\n    queryKey: [\"/api/schedules\", selectedMonth, selectedYear],\n  });\n\n  const { data: allUsers = [] } = useQuery<User[]>({\n    queryKey: [\"/api/admin/members\"],\n  });\n\n  const { data: louvorMembers = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users/ministry/Louvor\"],\n    enabled: allUsers.length > 0,\n  });\n\n  const { data: obreirosMembers = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users/ministry/Obreiros\"],\n    enabled: allUsers.length > 0,\n  });\n\n  // Fetch assignments for each schedule\n  const scheduleDetailsQueries = useQueries({\n    queries: schedules.map(schedule => ({\n      queryKey: [\"/api/schedules/details\", schedule.id],\n      queryFn: async () => {\n        const response = await fetch(`/api/schedules/details/${schedule.id}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch schedule details\");\n        return response.json();\n      },\n      enabled: schedules.length > 0,\n    })),\n  });\n\n  const schedulesWithAssignments: ScheduleWithAssignments[] = schedules.map((schedule, index) => {\n    const details = scheduleDetailsQueries[index]?.data as any;\n    const assignments = details?.assignments || [];\n    \n    const assignmentsWithUsers = assignments.map((assignment: ScheduleAssignment) => ({\n      ...assignment,\n      user: allUsers.find(u => u.id === assignment.userId),\n    }));\n\n    return {\n      ...schedule,\n      assignments: assignmentsWithUsers,\n    };\n  });\n\n  const createScheduleMutation = useMutation({\n    mutationFn: async (data: ScheduleFormData) => {\n      const schedule = await apiRequest<Schedule>(\"POST\", \"/api/schedules\", data);\n      \n      // Create assignments for louvor positions\n      if (data.tipo === \"louvor\") {\n        for (const posicao of POSICOES_LOUVOR) {\n          await apiRequest(\"POST\", \"/api/assignments\", {\n            scheduleId: schedule.id,\n            userId: assignments[posicao] || null,\n            posicao,\n          });\n        }\n      } else {\n        // For obreiros, create 4 positions\n        for (let i = 0; i < 4; i++) {\n          await apiRequest(\"POST\", \"/api/assignments\", {\n            scheduleId: schedule.id,\n            userId: assignments[`obreiro-${i}`] || null,\n            posicao: \"obreiro\",\n          });\n        }\n      }\n      \n      return schedule;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedules\"] });\n      setIsDialogOpen(false);\n      setAssignments({});\n      form.reset();\n      toast({\n        title: \"Escala criada!\",\n        description: \"A escala foi criada com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar escala\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteScheduleMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/schedules/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedules\"] });\n      toast({\n        title: \"Escala removida\",\n        description: \"A escala foi removida com sucesso.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ScheduleFormData) => {\n    createScheduleMutation.mutate(data);\n  };\n\n  const louvorSchedules = schedulesWithAssignments.filter(s => s.tipo === \"louvor\");\n  const obreirosSchedules = schedulesWithAssignments.filter(s => s.tipo === \"obreiros\");\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"font-sans text-4xl font-semibold mb-2\">Gerenciar Escalas</h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Crie e gerencie escalas de louvor e obreiros\n          </p>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-schedule\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nova Escala\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Criar Nova Escala</DialogTitle>\n              <DialogDescription>\n                Preencha os dados da escala e atribua membros às posições\n              </DialogDescription>\n            </DialogHeader>\n\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"tipo\">Tipo de Escala</Label>\n                  <Select\n                    value={form.watch(\"tipo\")}\n                    onValueChange={(value) => form.setValue(\"tipo\", value as \"louvor\" | \"obreiros\")}\n                  >\n                    <SelectTrigger data-testid=\"select-schedule-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"louvor\">Louvor</SelectItem>\n                      <SelectItem value=\"obreiros\">Obreiros</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"data\">Data do Culto</Label>\n                  <Input\n                    type=\"date\"\n                    {...form.register(\"data\")}\n                    data-testid=\"input-schedule-date\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"observacoes\">Observações (opcional)</Label>\n                <Textarea\n                  {...form.register(\"observacoes\")}\n                  placeholder=\"Ex: Culto de celebração\"\n                  data-testid=\"input-schedule-notes\"\n                />\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold\">Atribuir Membros</h3>\n                {form.watch(\"tipo\") === \"louvor\" ? (\n                  <div className=\"grid gap-3\">\n                    {POSICOES_LOUVOR.map(posicao => (\n                      <div key={posicao} className=\"grid grid-cols-3 gap-2 items-center\">\n                        <Label>{POSICOES_LABELS[posicao]}</Label>\n                        <div className=\"col-span-2\">\n                          <Select\n                            value={assignments[posicao]?.toString() || \"vazio\"}\n                            onValueChange={(value) => setAssignments({\n                              ...assignments,\n                              [posicao]: value === \"vazio\" ? null : parseInt(value),\n                            })}\n                          >\n                            <SelectTrigger data-testid={`select-${posicao}`}>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"vazio\">Vazio</SelectItem>\n                              {louvorMembers.map(user => (\n                                <SelectItem key={user.id} value={user.id.toString()}>\n                                  {user.nome}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"grid gap-3\">\n                    {[0, 1, 2, 3].map(idx => (\n                      <div key={idx} className=\"grid grid-cols-3 gap-2 items-center\">\n                        <Label>Obreiro {idx + 1}</Label>\n                        <div className=\"col-span-2\">\n                          <Select\n                            value={assignments[`obreiro-${idx}`]?.toString() || \"vazio\"}\n                            onValueChange={(value) => setAssignments({\n                              ...assignments,\n                              [`obreiro-${idx}`]: value === \"vazio\" ? null : parseInt(value),\n                            })}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"vazio\">Vazio</SelectItem>\n                              {obreirosMembers.map(user => (\n                                <SelectItem key={user.id} value={user.id.toString()}>\n                                  {user.nome}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex gap-2 justify-end\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createScheduleMutation.isPending}\n                  data-testid=\"button-save-schedule\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {createScheduleMutation.isPending ? \"Salvando...\" : \"Salvar Escala\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {isLoading ? (\n        <p className=\"text-center text-muted-foreground py-8\">Carregando escalas...</p>\n      ) : (\n        <div className=\"space-y-8\">\n          {/* Escalas de Louvor */}\n          <div>\n            <h2 className=\"font-sans text-2xl font-semibold mb-4\">Escalas de Louvor</h2>\n            {louvorSchedules.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {louvorSchedules.map((schedule) => (\n                  <Card key={schedule.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Calendar className=\"w-4 h-4\" />\n                            {new Date(schedule.data).toLocaleDateString('pt-BR')}\n                          </CardTitle>\n                          {schedule.observacoes && (\n                            <CardDescription>{schedule.observacoes}</CardDescription>\n                          )}\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => deleteScheduleMutation.mutate(schedule.id)}\n                          data-testid={`button-delete-${schedule.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {POSICOES_LOUVOR.map(posicao => {\n                          const assignment = schedule.assignments.find(a => a.posicao === posicao);\n                          return (\n                            <div key={posicao} className=\"flex justify-between items-center\">\n                              <span className=\"text-sm font-medium\">{POSICOES_LABELS[posicao]}:</span>\n                              {assignment?.user ? (\n                                <Badge variant=\"default\" data-testid={`badge-${posicao}-${assignment.user.id}`}>\n                                  {assignment.user.nome}\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"outline\">Vazio</Badge>\n                              )}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  Nenhuma escala de louvor cadastrada\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Escalas de Obreiros */}\n          <div>\n            <h2 className=\"font-sans text-2xl font-semibold mb-4\">Escalas de Obreiros</h2>\n            {obreirosSchedules.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {obreirosSchedules.map((schedule) => (\n                  <Card key={schedule.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Calendar className=\"w-4 h-4\" />\n                            {new Date(schedule.data).toLocaleDateString('pt-BR')}\n                          </CardTitle>\n                          {schedule.observacoes && (\n                            <CardDescription>{schedule.observacoes}</CardDescription>\n                          )}\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => deleteScheduleMutation.mutate(schedule.id)}\n                          data-testid={`button-delete-${schedule.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {schedule.assignments.map((assignment, idx) => (\n                          <div key={idx} className=\"flex justify-between items-center\">\n                            <span className=\"text-sm font-medium\">Obreiro {idx + 1}:</span>\n                            {assignment?.user ? (\n                              <Badge variant=\"default\" data-testid={`badge-obreiro-${idx}-${assignment.user.id}`}>\n                                {assignment.user.nome}\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"outline\">Vazio</Badge>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  Nenhuma escala de obreiros cadastrada\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":17781},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest<T = any>(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<T> {\n  const token = localStorage.getItem(\"token\");\n  const headers: Record<string, string> = {\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    ...(token ? { \"Authorization\": `Bearer ${token}` } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  \n  // Handle 204 No Content responses\n  if (res.status === 204) {\n    return undefined as T;\n  }\n  \n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"token\");\n    const headers: Record<string, string> = {\n      ...(token ? { \"Authorization\": `Bearer ${token}` } : {}),\n    };\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1850},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"replit.md":{"content":"# Igreja Comunidade - Portal da Igreja\n\n## Overview\nComplete church website with public pages, secure member area, and administrative panel. Built with React, TypeScript, Express, and PostgreSQL.\n\n## Project Structure\n```\n├── client/src/\n│   ├── pages/           # All page components\n│   │   ├── home.tsx              # Public homepage\n│   │   ├── login.tsx             # Member login\n│   │   ├── member-dashboard.tsx  # Member dashboard\n│   │   ├── member-courses.tsx    # Course viewer\n│   │   ├── member-materials.tsx  # PDF materials\n│   │   ├── member-videos.tsx     # Private videos\n│   │   ├── member-profile.tsx    # User profile\n│   │   ├── admin-dashboard.tsx   # Admin overview\n│   │   ├── admin-members.tsx     # Member management\n│   │   ├── admin-courses.tsx     # Course management\n│   │   ├── admin-events.tsx      # Event management\n│   │   └── admin-materials.tsx   # Materials management\n│   ├── components/      # Reusable components\n│   │   ├── ui/                   # Shadcn components\n│   │   ├── app-sidebar.tsx       # Member sidebar\n│   │   ├── member-layout.tsx     # Member wrapper\n│   │   └── admin-layout.tsx      # Admin wrapper\n│   └── App.tsx          # Main router\n├── server/\n│   ├── routes.ts        # API endpoints\n│   ├── storage.ts       # Database operations\n│   └── db.ts            # Database connection\n└── shared/\n    └── schema.ts        # Data models & types\n```\n\n## Database Schema\n- **users**: Members and administrators (with ministerio and isLider fields)\n- **events**: Church events (public)\n- **courses**: Educational courses\n- **lessons**: Course lessons (video-based)\n- **materials**: PDFs and private videos\n- **prayer_requests**: Prayer requests system\n- **schedules**: Monthly schedules (louvor & obreiros)\n- **schedule_assignments**: Assignments of members to positions\n- **notifications**: User notifications (pending implementation)\n\n## Features\n\n### Public Site (/)\n- Hero section with church image\n- About section with mission\n- Worship schedule (Wednes day & Sunday)\n- Upcoming events showcase\n- Contact information with Google Maps\n- Fully responsive design\n\n### Member Area (/membro)\n- Protected routes (JWT authentication)\n- Dashboard with stats\n- Courses with video lessons\n- PDF materials access\n- Private YouTube videos\n- User profile view\n- Monthly schedules viewer (louvor & obreiros)\n- Sidebar navigation\n\n### Leader Area (/lider)\n- Schedule management (leaders & admins only)\n- Create/edit worship schedules\n- Assign members to positions: Teclado, Violão, Baixo, Bateria, Voz, Backing\n- Create/edit workers schedules\n- Ministry-based member suggestions\n\n### Admin Panel (/admin)\n- **Member management** (full CRUD operations)\n  - Create new members with all fields\n  - Edit existing members (name, email, password, birthdate, profession, address, ministry, leader/admin status)\n  - Optional password update (empty preserves current password)\n  - Delete members\n  - Toggle admin permissions\n  - Filters by neighborhood and profession\n  - CSV export functionality\n- Course & lesson management\n- Event management\n- Materials management (PDFs & videos)\n- Prayer request moderation\n- Analytics dashboard with demographics charts\n- Role-based access control\n- Top navigation layout\n\n## Authentication\n- JWT tokens stored in localStorage\n- bcrypt password hashing\n- Route protection middleware\n- Separate member/admin access\n\n## Design System\n- Colors: Blue (#2563eb), Gold (#fbbf24), White\n- Fonts: Poppins (headings), Inter (body)\n- Shadcn UI components\n- Consistent spacing and elevation\n- Dark mode support\n- Fully responsive\n\n## API Routes\n```\nPOST   /api/auth/login\nGET    /api/events/public\nGET    /api/courses\nGET    /api/courses/:id/lessons\nGET    /api/materials\nGET    /api/admin/members\nPOST   /api/admin/members\nPATCH  /api/admin/members/:id              # Edit member (all fields optional, empty strings sanitized)\nPATCH  /api/admin/members/:id/toggle-admin\nDELETE /api/admin/members/:id\nPOST   /api/admin/courses\nDELETE /api/admin/courses/:id\nPOST   /api/admin/lessons\nDELETE /api/admin/lessons/:id\nGET    /api/admin/events\nPOST   /api/admin/events\nDELETE /api/admin/events/:id\nPOST   /api/admin/materials\nDELETE /api/admin/materials/:id\n```\n\n## Development Notes\n- Run `npm run db:push` to sync database schema\n- First user must be created via admin panel or database\n- YouTube URLs are automatically converted to embeds\n- CSV export uses client-side generation\n- All images stored as URLs (not file uploads)\n\n## Default Admin Setup\nTo create the first admin user, insert directly into database or use the create member form with admin checkbox.\n\n## Recent Changes\n- **Member Editing Feature** (December 2024): Admins can now fully edit member information\n  - Edit dialog with all user fields (name, email, password, birthdate, profession, address, etc.)\n  - Optional password update - empty password field preserves existing password\n  - Backend sanitization of empty strings for optional fields (prevents database errors)\n  - Ministry and leader status assignment during edit\n  - Form validation with Zod schema\n  - End-to-end tested with Playwright\n- **Monthly Schedule System**: Complete workflow for worship and workers schedules\n  - Leaders can create and manage schedules\n  - Assign members to specific positions (Teclado, Violão, Baixo, Bateria, Voz, Backing)\n  - Ministry-based suggestions for easier assignment\n  - Members can view their schedules\n- **Prayer Request System**: Public submission, admin moderation, public display\n- **Analytics Dashboard**: Member demographics with age, neighborhood, and profession charts (Recharts)\n- **User Roles**: Added ministerio (ministry) and isLider (leader) fields\n- Complete database schema with relations\n- Design system configured (blue, gold, white)\n- All components use Shadcn UI patterns\n","size_bytes":6062},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        gold: {\n          DEFAULT: \"hsl(var(--gold) / <alpha-value>)\",\n          foreground: \"hsl(var(--gold-foreground) / <alpha-value>)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4201},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, events, courses, lessons, materials } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nasync function seed() {\n  console.log(\"🌱 Seeding database...\");\n\n  try {\n    // Create admin user\n    const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n    const [admin] = await db.insert(users).values({\n      nome: \"Administrador\",\n      email: \"admin@igreja.com\",\n      senha: hashedPassword,\n      dataNascimento: \"1980-01-01\",\n      profissao: \"Pastor\",\n      endereco: \"Rua da Igreja, 100\",\n      bairro: \"Centro\",\n      cidade: \"São Paulo\",\n      isAdmin: true,\n    }).returning();\n    console.log(\"✅ Admin user created:\", admin.email);\n\n    // Create regular member\n    const memberPassword = await bcrypt.hash(\"membro123\", 10);\n    const [member] = await db.insert(users).values({\n      nome: \"João Silva\",\n      email: \"joao@email.com\",\n      senha: memberPassword,\n      dataNascimento: \"1990-05-15\",\n      profissao: \"Engenheiro\",\n      endereco: \"Rua das Flores, 50\",\n      bairro: \"Jardins\",\n      cidade: \"São Paulo\",\n      isAdmin: false,\n    }).returning();\n    console.log(\"✅ Member user created:\", member.email);\n\n    // Create events\n    const eventsData = [\n      {\n        titulo: \"Culto de Celebração\",\n        descricao: \"Culto especial de celebração com louvor e adoração\",\n        data: \"2025-01-15\",\n        local: \"Igreja Principal\",\n        imagem: \"https://images.unsplash.com/photo-1438232992991-995b7058bbb3?w=800&q=80\",\n      },\n      {\n        titulo: \"Retiro Espiritual\",\n        descricao: \"Fim de semana de renovação espiritual nas montanhas\",\n        data: \"2025-02-20\",\n        local: \"Retiro Betânia\",\n        imagem: \"https://images.unsplash.com/photo-1490730141103-6cac27aaab94?w=800&q=80\",\n      },\n      {\n        titulo: \"Conferência de Jovens\",\n        descricao: \"Encontro de jovens com palestras e atividades\",\n        data: \"2025-03-10\",\n        local: \"Salão de Eventos\",\n        imagem: \"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?w=800&q=80\",\n      },\n    ];\n\n    for (const event of eventsData) {\n      await db.insert(events).values(event);\n    }\n    console.log(`✅ Created ${eventsData.length} events`);\n\n    // Create courses\n    const [curso1] = await db.insert(courses).values({\n      nome: \"Fundamentos da Fé\",\n      descricao: \"Curso básico sobre os fundamentos da fé cristã\",\n      imagem: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&q=80\",\n    }).returning();\n\n    const [curso2] = await db.insert(courses).values({\n      nome: \"Liderança Cristã\",\n      descricao: \"Desenvolvimento de líderes segundo princípios bíblicos\",\n      imagem: \"https://images.unsplash.com/photo-1519389950473-47ba0277781c?w=800&q=80\",\n    }).returning();\n    console.log(\"✅ Created 2 courses\");\n\n    // Create lessons for curso1\n    await db.insert(lessons).values([\n      {\n        cursoId: curso1.id,\n        titulo: \"Introdução à Fé\",\n        descricao: \"Entendendo os primeiros passos na fé cristã\",\n        videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        ordem: 1,\n      },\n      {\n        cursoId: curso1.id,\n        titulo: \"A Palavra de Deus\",\n        descricao: \"Conhecendo a Bíblia e sua importância\",\n        videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        ordem: 2,\n      },\n      {\n        cursoId: curso1.id,\n        titulo: \"Vida de Oração\",\n        descricao: \"Desenvolvendo uma vida de oração consistente\",\n        videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        ordem: 3,\n      },\n    ]);\n\n    // Create lessons for curso2\n    await db.insert(lessons).values([\n      {\n        cursoId: curso2.id,\n        titulo: \"O Chamado do Líder\",\n        descricao: \"Entendendo o chamado para a liderança\",\n        videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        ordem: 1,\n      },\n      {\n        cursoId: curso2.id,\n        titulo: \"Servindo com Excelência\",\n        descricao: \"Princípios de excelência no serviço\",\n        videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        ordem: 2,\n      },\n    ]);\n    console.log(\"✅ Created 5 lessons\");\n\n    // Create materials\n    await db.insert(materials).values([\n      {\n        titulo: \"Manual do Novo Convertido\",\n        descricao: \"Guia completo para novos membros\",\n        arquivoUrl: \"https://example.com/manual.pdf\",\n        tipo: \"pdf\",\n      },\n      {\n        titulo: \"Estudo Bíblico - Romanos\",\n        descricao: \"Apostila de estudo do livro de Romanos\",\n        arquivoUrl: \"https://example.com/romanos.pdf\",\n        tipo: \"pdf\",\n      },\n      {\n        titulo: \"Mensagem do Pastor\",\n        descricao: \"Palavra especial do pastor para os membros\",\n        arquivoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        tipo: \"video\",\n      },\n    ]);\n    console.log(\"✅ Created 3 materials\");\n\n    console.log(\"\\n🎉 Seeding completed successfully!\");\n    console.log(\"\\n📝 Test credentials:\");\n    console.log(\"Admin: admin@igreja.com / admin123\");\n    console.log(\"Member: joao@email.com / membro123\");\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    process.exit(1);\n  }\n}\n\nseed();\n","size_bytes":5283},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/member-dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BookOpen, Video, GraduationCap, TrendingUp } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Course, Material } from \"@shared/schema\";\n\nexport default function MemberDashboard() {\n  const { data: courses = [] } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: materials = [] } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  const pdfs = materials.filter(m => m.tipo === \"pdf\");\n  const videos = materials.filter(m => m.tipo === \"video\");\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-dashboard-title\">\n          Dashboard\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Bem-vindo de volta! Continue seu aprendizado.\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Card className=\"hover-elevate\" data-testid=\"card-stat-courses\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Cursos</CardTitle>\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              <GraduationCap className=\"w-4 h-4 text-primary\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-courses-count\">{courses.length}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Disponíveis para você\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"card-stat-pdfs\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Apostilas</CardTitle>\n            <div className=\"p-2 rounded-lg bg-gold/20\">\n              <BookOpen className=\"w-4 h-4 text-gold\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-pdfs-count\">{pdfs.length}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Materiais de estudo\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"card-stat-videos\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Vídeos</CardTitle>\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              <Video className=\"w-4 h-4 text-primary\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-videos-count\">{videos.length}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Conteúdo privado\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Courses */}\n      <div>\n        <h2 className=\"font-sans text-2xl font-semibold mb-6\" data-testid=\"text-recent-courses\">\n          Cursos Disponíveis\n        </h2>\n        {courses.length > 0 ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {courses.slice(0, 3).map((course) => (\n              <Card key={course.id} className=\"hover-elevate\" data-testid={`card-course-${course.id}`}>\n                {course.imagem && (\n                  <div className=\"h-40 overflow-hidden\">\n                    <img\n                      src={course.imagem}\n                      alt={course.nome}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                )}\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{course.nome}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">{course.descricao}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-12\">\n            <div className=\"text-center\">\n              <GraduationCap className=\"w-16 h-16 mx-auto text-muted-foreground/50 mb-4\" />\n              <p className=\"text-lg text-muted-foreground\">Nenhum curso disponível no momento</p>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* Recent Materials */}\n      <div>\n        <h2 className=\"font-sans text-2xl font-semibold mb-6\" data-testid=\"text-recent-materials\">\n          Materiais Recentes\n        </h2>\n        {pdfs.length > 0 ? (\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            {pdfs.slice(0, 4).map((material) => (\n              <Card key={material.id} className=\"hover-elevate\" data-testid={`card-material-${material.id}`}>\n                <CardHeader className=\"flex flex-row items-center gap-4 space-y-0\">\n                  <div className=\"p-3 rounded-lg bg-primary/10\">\n                    <BookOpen className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-base\">{material.titulo}</CardTitle>\n                    {material.descricao && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">{material.descricao}</p>\n                    )}\n                  </div>\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-12\">\n            <div className=\"text-center\">\n              <BookOpen className=\"w-16 h-16 mx-auto text-muted-foreground/50 mb-4\" />\n              <p className=\"text-lg text-muted-foreground\">Nenhuma apostila disponível no momento</p>\n            </div>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5972},"client/src/pages/admin-analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { Users, TrendingUp, UserPlus } from \"lucide-react\";\n\ninterface Analytics {\n  totalMembers: number;\n  membersByAge: { ageGroup: string; count: number }[];\n  membersByNeighborhood: { neighborhood: string; count: number }[];\n  membersByProfession: { profession: string; count: number }[];\n  recentMembersCount: number;\n}\n\nconst COLORS = [\"#1E40AF\", \"#3B82F6\", \"#60A5FA\", \"#93C5FD\", \"#BFDBFE\", \"#DBEAFE\", \"#EFF6FF\", \"#1E293B\"];\n\nexport default function AdminAnalyticsPage() {\n  const { data: analytics, isLoading } = useQuery<Analytics>({\n    queryKey: [\"/api/admin/analytics/members\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <p className=\"text-muted-foreground\">Carregando analytics...</p>\n      </div>\n    );\n  }\n\n  if (!analytics) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-analytics-title\">\n          Analytics\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Visão geral dos membros da igreja\n        </p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Total de Membros\n            </CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-members\">\n              {analytics.totalMembers}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Membros cadastrados\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Novos Membros\n            </CardTitle>\n            <UserPlus className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-recent-members\">\n              {analytics.recentMembersCount}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Últimos 30 dias\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Crescimento\n            </CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {analytics.totalMembers > 0 \n                ? ((analytics.recentMembersCount / analytics.totalMembers) * 100).toFixed(1)\n                : 0}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Taxa de novos membros\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid gap-8 md:grid-cols-2\">\n        {/* Age Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Distribuição por Idade</CardTitle>\n            <CardDescription>\n              Membros por faixa etária\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analytics.membersByAge}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"ageGroup\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"count\" fill=\"#1E40AF\" radius={[8, 8, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Neighborhood Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Bairros</CardTitle>\n            <CardDescription>\n              Membros por bairro (Top 10)\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={analytics.membersByNeighborhood}\n                  dataKey=\"count\"\n                  nameKey=\"neighborhood\"\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={100}\n                  label={(entry) => `${entry.neighborhood}: ${entry.count}`}\n                >\n                  {analytics.membersByNeighborhood.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Profession Distribution */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle>Top Profissões</CardTitle>\n            <CardDescription>\n              Membros por profissão (Top 10)\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analytics.membersByProfession} layout=\"vertical\">\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis type=\"number\" />\n                <YAxis dataKey=\"profession\" type=\"category\" width={150} />\n                <Tooltip />\n                <Bar dataKey=\"count\" fill=\"#3B82F6\" radius={[0, 8, 8, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6201},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/member-videos.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Video, PlayCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Material } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport default function MemberVideos() {\n  const [selectedVideo, setSelectedVideo] = useState<Material | null>(null);\n\n  const { data: materials = [], isLoading } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  const videos = materials.filter(m => m.tipo === \"video\");\n\n  const getYouTubeEmbedUrl = (url: string) => {\n    const videoId = url.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/)?.[1];\n    return videoId ? `https://www.youtube.com/embed/${videoId}` : url;\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-videos-title\">\n          Vídeos Privados\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Acesse conteúdo exclusivo em vídeo\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"overflow-hidden\">\n              <div className=\"h-48 bg-muted animate-pulse\" />\n              <CardHeader>\n                <div className=\"h-6 bg-muted animate-pulse rounded\" />\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n      ) : videos.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {videos.map((video) => (\n            <Card\n              key={video.id}\n              className=\"overflow-hidden hover-elevate cursor-pointer\"\n              onClick={() => setSelectedVideo(video)}\n              data-testid={`card-video-${video.id}`}\n            >\n              <div className=\"h-48 bg-gradient-to-br from-primary/20 to-gold/20 flex items-center justify-center relative\">\n                <PlayCircle className=\"w-16 h-16 text-white drop-shadow-lg\" />\n              </div>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">{video.titulo}</CardTitle>\n                {video.descricao && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">{video.descricao}</p>\n                )}\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-16\">\n          <div className=\"text-center\">\n            <Video className=\"w-20 h-20 mx-auto text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Nenhum vídeo disponível</h3>\n            <p className=\"text-muted-foreground\">\n              Novos vídeos serão adicionados em breve\n            </p>\n          </div>\n        </Card>\n      )}\n\n      {/* Video Player Dialog */}\n      <Dialog open={!!selectedVideo} onOpenChange={() => setSelectedVideo(null)}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">{selectedVideo?.titulo}</DialogTitle>\n            {selectedVideo?.descricao && (\n              <DialogDescription className=\"text-base\">\n                {selectedVideo.descricao}\n              </DialogDescription>\n            )}\n          </DialogHeader>\n          {selectedVideo && (\n            <div className=\"aspect-video rounded-lg overflow-hidden bg-black\">\n              <iframe\n                src={getYouTubeEmbedUrl(selectedVideo.arquivoUrl)}\n                className=\"w-full h-full\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n                data-testid=\"video-player\"\n              />\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":4040},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, app as any);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  app.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2148},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&family=Inter:wght@300;400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 5% 98%;\n\n  --foreground: 210 8% 15%;\n\n  --border: 210 8% 88%;\n\n  --card: 210 5% 96%;\n\n  --card-foreground: 210 8% 15%;\n\n  --card-border: 210 6% 90%;\n\n  --sidebar: 210 6% 94%;\n\n  --sidebar-foreground: 210 8% 15%;\n\n  --sidebar-border: 210 7% 88%;\n\n  --sidebar-primary: 218 85% 52%;\n\n  --sidebar-primary-foreground: 210 5% 98%;\n\n  --sidebar-accent: 210 12% 88%;\n\n  --sidebar-accent-foreground: 210 8% 20%;\n\n  --sidebar-ring: 218 85% 52%;\n\n  --popover: 210 8% 92%;\n\n  --popover-foreground: 210 8% 15%;\n\n  --popover-border: 210 9% 86%;\n\n  --primary: 0deg 0% 0%;\n\n  --primary-foreground: 210 5% 98%;\n\n  --gold: 43 96% 56%;\n\n  --gold-foreground: 210 8% 15%;\n\n  --secondary: 210 10% 86%;\n\n  --secondary-foreground: 210 8% 18%;\n\n  --muted: 210 12% 90%;\n\n  --muted-foreground: 210 8% 35%;\n\n  --accent: 210 15% 88%;\n\n  --accent-foreground: 210 8% 20%;\n\n  --destructive: 0 72% 48%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  --input: 210 12% 75%;\n  --ring: 218 85% 52%;\n  --chart-1: 218 85% 45%;\n  --chart-2: 38 92% 50%;\n  --chart-3: 280 75% 48%;\n  --chart-4: 168 76% 42%;\n  --chart-5: 15 80% 50%;\n\n  --font-sans: 'Poppins', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --font-body: 'Inter', sans-serif;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 8% 15% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(210 8% 15% / 0.08);\n  --shadow-sm: 0px 1px 3px 0px hsl(210 8% 15% / 0.10), 0px 1px 2px -1px hsl(210 8% 15% / 0.08);\n  --shadow: 0px 2px 4px -1px hsl(210 8% 15% / 0.08), 0px 4px 6px -1px hsl(210 8% 15% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(210 8% 15% / 0.08), 0px 6px 8px -2px hsl(210 8% 15% / 0.10);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 8% 15% / 0.10), 0px 4px 6px -4px hsl(210 8% 15% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 8% 15% / 0.10), 0px 8px 10px -6px hsl(210 8% 15% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 8% 15% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 6% 10%;\n\n  --foreground: 210 5% 92%;\n\n  --border: 210 8% 20%;\n\n  --card: 210 6% 13%;\n\n  --card-foreground: 210 5% 92%;\n\n  --card-border: 210 7% 18%;\n\n  --sidebar: 210 6% 15%;\n\n  --sidebar-foreground: 210 5% 92%;\n\n  --sidebar-border: 210 7% 20%;\n\n  --sidebar-primary: 218 85% 52%;\n\n  --sidebar-primary-foreground: 210 5% 98%;\n\n  --sidebar-accent: 210 10% 22%;\n\n  --sidebar-accent-foreground: 210 5% 92%;\n\n  --sidebar-ring: 218 85% 52%;\n\n  --popover: 210 8% 18%;\n\n  --popover-foreground: 210 5% 92%;\n\n  --popover-border: 210 9% 24%;\n\n  --primary: 218 85% 52%;\n\n  --primary-foreground: 210 5% 98%;\n\n  --gold: 43 96% 56%;\n\n  --gold-foreground: 210 5% 92%;\n\n  --secondary: 210 8% 24%;\n\n  --secondary-foreground: 210 5% 92%;\n\n  --muted: 210 10% 20%;\n\n  --muted-foreground: 210 6% 68%;\n\n  --accent: 210 12% 22%;\n\n  --accent-foreground: 210 5% 92%;\n\n  --destructive: 0 72% 48%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  --input: 210 12% 32%;\n  --ring: 218 85% 52%;\n  --chart-1: 218 85% 65%;\n  --chart-2: 38 92% 60%;\n  --chart-3: 280 75% 65%;\n  --chart-4: 168 76% 58%;\n  --chart-5: 15 80% 62%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 8% 5% / 0.30);\n  --shadow-xs: 0px 1px 2px 0px hsl(210 8% 5% / 0.35);\n  --shadow-sm: 0px 1px 3px 0px hsl(210 8% 5% / 0.40), 0px 1px 2px -1px hsl(210 8% 5% / 0.35);\n  --shadow: 0px 2px 4px -1px hsl(210 8% 5% / 0.35), 0px 4px 6px -1px hsl(210 8% 5% / 0.40);\n  --shadow-md: 0px 4px 6px -1px hsl(210 8% 5% / 0.35), 0px 6px 8px -2px hsl(210 8% 5% / 0.40);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 8% 5% / 0.40), 0px 4px 6px -4px hsl(210 8% 5% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 8% 5% / 0.40), 0px 8px 10px -6px hsl(210 8% 5% / 0.35);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 8% 5% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground antialiased;\n    font-family: var(--font-body);\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":12168},"client/src/pages/admin-dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, GraduationCap, Calendar, BookOpen } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { User, Course, Event, Material } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/admin/members\"],\n  });\n\n  const { data: courses = [] } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: events = [] } = useQuery<Event[]>({\n    queryKey: [\"/api/admin/events\"],\n  });\n\n  const { data: materials = [] } = useQuery<Material[]>({\n    queryKey: [\"/api/materials\"],\n  });\n\n  const totalMembers = users.filter(u => !u.isAdmin).length;\n  const totalAdmins = users.filter(u => u.isAdmin).length;\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-admin-title\">\n          Dashboard Administrativo\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Visão geral do sistema\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"hover-elevate\" data-testid=\"card-stat-members\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Membros</CardTitle>\n            <Users className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-members-count\">{totalMembers}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              +{totalAdmins} administradores\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"card-stat-courses\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Cursos Ativos</CardTitle>\n            <GraduationCap className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-courses-count\">{courses.length}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Cursos cadastrados\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"card-stat-events\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Eventos</CardTitle>\n            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-events-count\">{events.length}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Eventos cadastrados\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"card-stat-materials\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Materiais</CardTitle>\n            <BookOpen className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-materials-count\">{materials.length}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              PDFs e vídeos\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <div>\n        <h2 className=\"font-sans text-2xl font-semibold mb-6\">Ações Rápidas</h2>\n        <div className=\"grid md:grid-cols-3 gap-4\">\n          <Card className=\"hover-elevate cursor-pointer\" onClick={() => window.location.href = '/admin/members'}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Gerenciar Membros\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Cadastrar, editar e visualizar membros\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate cursor-pointer\" onClick={() => window.location.href = '/admin/courses'}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <GraduationCap className=\"w-5 h-5\" />\n                Gerenciar Cursos\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Criar e editar cursos e aulas\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate cursor-pointer\" onClick={() => window.location.href = '/admin/events'}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Gerenciar Eventos\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Criar e editar eventos da igreja\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5561},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { users, events, courses, lessons, materials, prayerRequests, schedules, scheduleAssignments, questions, lessonCompletions } from \"@shared/schema\";\nimport type { User, InsertUser, Event, InsertEvent, Course, InsertCourse, Lesson, InsertLesson, Material, InsertMaterial, PrayerRequest, InsertPrayerRequest, Schedule, InsertSchedule, ScheduleAssignment, InsertScheduleAssignment, Question, InsertQuestion, LessonCompletion, InsertLessonCompletion } from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // Auth\n  getUserByEmail(email: string): Promise<User | null>;\n  createUser(data: InsertUser): Promise<User>;\n  \n  // Members\n  getAllUsers(): Promise<User[]>;\n  getUserById(id: number): Promise<User | null>;\n  updateUser(id: number, data: Partial<InsertUser>): Promise<User>;\n  updateUserAdmin(id: number, isAdmin: boolean): Promise<User>;\n  deleteUser(id: number): Promise<void>;\n  \n  // Events\n  getAllEvents(): Promise<Event[]>;\n  getPublicEvents(): Promise<Event[]>;\n  createEvent(data: InsertEvent): Promise<Event>;\n  deleteEvent(id: number): Promise<void>;\n  \n  // Courses\n  getAllCourses(): Promise<Course[]>;\n  getCourseById(id: number): Promise<Course | null>;\n  createCourse(data: InsertCourse): Promise<Course>;\n  deleteCourse(id: number): Promise<void>;\n  \n  // Lessons\n  getLessonsByCourseId(courseId: number): Promise<Lesson[]>;\n  createLesson(data: InsertLesson): Promise<Lesson>;\n  deleteLesson(id: number): Promise<void>;\n  \n  // Materials\n  getAllMaterials(): Promise<Material[]>;\n  createMaterial(data: InsertMaterial): Promise<Material>;\n  deleteMaterial(id: number): Promise<void>;\n  \n  // Prayer Requests\n  getAllPrayerRequests(): Promise<PrayerRequest[]>;\n  getPublicPrayerRequests(): Promise<PrayerRequest[]>;\n  createPrayerRequest(data: InsertPrayerRequest): Promise<PrayerRequest>;\n  updatePrayerRequestStatus(id: number, status: string, isPublic: boolean): Promise<PrayerRequest>;\n  deletePrayerRequest(id: number): Promise<void>;\n  \n  // Analytics\n  getMemberAnalytics(): Promise<{\n    totalMembers: number;\n    membersByAge: { ageGroup: string; count: number }[];\n    membersByNeighborhood: { neighborhood: string; count: number }[];\n    membersByProfession: { profession: string; count: number }[];\n    recentMembersCount: number;\n  }>;\n  \n  // Schedules\n  getAllSchedules(): Promise<Schedule[]>;\n  getSchedulesByMonth(mes: number, ano: number): Promise<Schedule[]>;\n  getScheduleById(id: number): Promise<Schedule | null>;\n  createSchedule(data: InsertSchedule): Promise<Schedule>;\n  updateSchedule(id: number, data: Partial<InsertSchedule>): Promise<Schedule>;\n  deleteSchedule(id: number): Promise<void>;\n  \n  // Schedule Assignments\n  getAssignmentsBySchedule(scheduleId: number): Promise<ScheduleAssignment[]>;\n  createAssignment(data: InsertScheduleAssignment): Promise<ScheduleAssignment>;\n  updateAssignment(id: number, userId: number | null): Promise<ScheduleAssignment>;\n  deleteAssignment(id: number): Promise<void>;\n  deleteAssignmentsBySchedule(scheduleId: number): Promise<void>;\n  \n  // Members with ministry filter\n  getUsersByMinistry(ministerio: string): Promise<User[]>;\n  updateUserMinistry(id: number, ministerio: string | null, isLider: boolean): Promise<User>;\n  \n  // Questions\n  getQuestionsByLessonId(lessonId: number): Promise<Question[]>;\n  createQuestion(data: InsertQuestion): Promise<Question>;\n  deleteQuestion(id: number): Promise<void>;\n  deleteQuestionsByLessonId(lessonId: number): Promise<void>;\n  \n  // Lesson Completions\n  getLessonCompletion(userId: number, lessonId: number): Promise<LessonCompletion | null>;\n  createOrUpdateLessonCompletion(userId: number, lessonId: number, score: number, completed: boolean): Promise<LessonCompletion>;\n  getCourseProgress(userId: number, courseId: number): Promise<{ totalLessons: number, completedLessons: number, progress: number }>;\n  getAllUsersProgress(courseId: number): Promise<{ userId: number; userName: string; progress: number; completedLessons: number }[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Auth\n  async getUserByEmail(email: string): Promise<User | null> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0] || null;\n  }\n\n  async createUser(data: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(data.senha, 10);\n    const result = await db.insert(users).values({\n      ...data,\n      senha: hashedPassword,\n    }).returning();\n    return result[0];\n  }\n\n  // Members\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getUserById(id: number): Promise<User | null> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0] || null;\n  }\n\n  async updateUserAdmin(id: number, isAdmin: boolean): Promise<User> {\n    const result = await db.update(users)\n      .set({ isAdmin })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateUser(id: number, data: Partial<InsertUser>): Promise<User> {\n    // If password is provided, hash it\n    const updateData = { ...data };\n    if (updateData.senha) {\n      updateData.senha = await bcrypt.hash(updateData.senha, 10);\n    }\n    \n    const result = await db.update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteUser(id: number): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Events\n  async getAllEvents(): Promise<Event[]> {\n    return await db.select().from(events).orderBy(events.data);\n  }\n\n  async getPublicEvents(): Promise<Event[]> {\n    return await db.select().from(events).orderBy(events.data);\n  }\n\n  async createEvent(data: InsertEvent): Promise<Event> {\n    const result = await db.insert(events).values(data).returning();\n    return result[0];\n  }\n\n  async deleteEvent(id: number): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  // Courses\n  async getAllCourses(): Promise<Course[]> {\n    return await db.select().from(courses);\n  }\n\n  async getCourseById(id: number): Promise<Course | null> {\n    const result = await db.select().from(courses).where(eq(courses.id, id)).limit(1);\n    return result[0] || null;\n  }\n\n  async createCourse(data: InsertCourse): Promise<Course> {\n    const result = await db.insert(courses).values(data).returning();\n    return result[0];\n  }\n\n  async deleteCourse(id: number): Promise<void> {\n    await db.delete(lessons).where(eq(lessons.cursoId, id));\n    await db.delete(courses).where(eq(courses.id, id));\n  }\n\n  // Lessons\n  async getLessonsByCourseId(courseId: number): Promise<Lesson[]> {\n    return await db.select().from(lessons)\n      .where(eq(lessons.cursoId, courseId))\n      .orderBy(lessons.ordem);\n  }\n\n  async createLesson(data: InsertLesson): Promise<Lesson> {\n    const result = await db.insert(lessons).values(data).returning();\n    return result[0];\n  }\n\n  async deleteLesson(id: number): Promise<void> {\n    await db.delete(lessons).where(eq(lessons.id, id));\n  }\n\n  // Materials\n  async getAllMaterials(): Promise<Material[]> {\n    return await db.select().from(materials);\n  }\n\n  async createMaterial(data: InsertMaterial): Promise<Material> {\n    const result = await db.insert(materials).values(data).returning();\n    return result[0];\n  }\n\n  async deleteMaterial(id: number): Promise<void> {\n    await db.delete(materials).where(eq(materials.id, id));\n  }\n\n  // Prayer Requests\n  async getAllPrayerRequests(): Promise<PrayerRequest[]> {\n    return await db.select().from(prayerRequests).orderBy(prayerRequests.createdAt);\n  }\n\n  async getPublicPrayerRequests(): Promise<PrayerRequest[]> {\n    return await db.select().from(prayerRequests)\n      .where(eq(prayerRequests.isPublic, true))\n      .orderBy(prayerRequests.createdAt);\n  }\n\n  async createPrayerRequest(data: InsertPrayerRequest): Promise<PrayerRequest> {\n    const result = await db.insert(prayerRequests).values(data).returning();\n    return result[0];\n  }\n\n  async updatePrayerRequestStatus(id: number, status: string, isPublic: boolean): Promise<PrayerRequest> {\n    const result = await db.update(prayerRequests)\n      .set({ status, isPublic })\n      .where(eq(prayerRequests.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deletePrayerRequest(id: number): Promise<void> {\n    await db.delete(prayerRequests).where(eq(prayerRequests.id, id));\n  }\n\n  // Analytics\n  async getMemberAnalytics() {\n    const allUsers = await db.select().from(users);\n    \n    const totalMembers = allUsers.length;\n    \n    // Calculate age groups\n    const ageGroups: Record<string, number> = {\n      \"18-25\": 0,\n      \"26-35\": 0,\n      \"36-45\": 0,\n      \"46-55\": 0,\n      \"56-65\": 0,\n      \"66+\": 0,\n    };\n    \n    const now = new Date();\n    allUsers.forEach(user => {\n      if (user.dataNascimento) {\n        const birthDate = new Date(user.dataNascimento);\n        const age = now.getFullYear() - birthDate.getFullYear();\n        \n        if (age >= 18 && age <= 25) ageGroups[\"18-25\"]++;\n        else if (age >= 26 && age <= 35) ageGroups[\"26-35\"]++;\n        else if (age >= 36 && age <= 45) ageGroups[\"36-45\"]++;\n        else if (age >= 46 && age <= 55) ageGroups[\"46-55\"]++;\n        else if (age >= 56 && age <= 65) ageGroups[\"56-65\"]++;\n        else if (age >= 66) ageGroups[\"66+\"]++;\n      }\n    });\n    \n    const membersByAge = Object.entries(ageGroups).map(([ageGroup, count]) => ({\n      ageGroup,\n      count,\n    }));\n    \n    // Count by neighborhood\n    const neighborhoodCounts: Record<string, number> = {};\n    allUsers.forEach(user => {\n      if (user.bairro) {\n        neighborhoodCounts[user.bairro] = (neighborhoodCounts[user.bairro] || 0) + 1;\n      }\n    });\n    \n    const membersByNeighborhood = Object.entries(neighborhoodCounts)\n      .map(([neighborhood, count]) => ({ neighborhood, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n    \n    // Count by profession\n    const professionCounts: Record<string, number> = {};\n    allUsers.forEach(user => {\n      if (user.profissao) {\n        professionCounts[user.profissao] = (professionCounts[user.profissao] || 0) + 1;\n      }\n    });\n    \n    const membersByProfession = Object.entries(professionCounts)\n      .map(([profession, count]) => ({ profession, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n    \n    // Count members joined in last 30 days\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const recentMembersCount = allUsers.filter(user => \n      new Date(user.createdAt) >= thirtyDaysAgo\n    ).length;\n    \n    return {\n      totalMembers,\n      membersByAge,\n      membersByNeighborhood,\n      membersByProfession,\n      recentMembersCount,\n    };\n  }\n\n  // Schedules\n  async getAllSchedules(): Promise<Schedule[]> {\n    return await db.select().from(schedules).orderBy(schedules.data);\n  }\n\n  async getSchedulesByMonth(mes: number, ano: number): Promise<Schedule[]> {\n    return await db.select().from(schedules)\n      .where(and(eq(schedules.mes, mes), eq(schedules.ano, ano)))\n      .orderBy(schedules.data);\n  }\n\n  async getScheduleById(id: number): Promise<Schedule | null> {\n    const result = await db.select().from(schedules).where(eq(schedules.id, id)).limit(1);\n    return result[0] || null;\n  }\n\n  async createSchedule(data: InsertSchedule): Promise<Schedule> {\n    const result = await db.insert(schedules).values(data).returning();\n    return result[0];\n  }\n\n  async updateSchedule(id: number, data: Partial<InsertSchedule>): Promise<Schedule> {\n    const result = await db.update(schedules)\n      .set(data)\n      .where(eq(schedules.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteSchedule(id: number): Promise<void> {\n    await db.delete(schedules).where(eq(schedules.id, id));\n  }\n\n  // Schedule Assignments\n  async getAssignmentsBySchedule(scheduleId: number): Promise<ScheduleAssignment[]> {\n    return await db.select().from(scheduleAssignments)\n      .where(eq(scheduleAssignments.scheduleId, scheduleId));\n  }\n\n  async createAssignment(data: InsertScheduleAssignment): Promise<ScheduleAssignment> {\n    const result = await db.insert(scheduleAssignments).values(data).returning();\n    return result[0];\n  }\n\n  async updateAssignment(id: number, userId: number | null): Promise<ScheduleAssignment> {\n    const result = await db.update(scheduleAssignments)\n      .set({ userId })\n      .where(eq(scheduleAssignments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteAssignment(id: number): Promise<void> {\n    await db.delete(scheduleAssignments).where(eq(scheduleAssignments.id, id));\n  }\n\n  async deleteAssignmentsBySchedule(scheduleId: number): Promise<void> {\n    await db.delete(scheduleAssignments).where(eq(scheduleAssignments.scheduleId, scheduleId));\n  }\n\n  // Members with ministry filter\n  async getUsersByMinistry(ministerio: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.ministerio, ministerio));\n  }\n\n  async updateUserMinistry(id: number, ministerio: string | null, isLider: boolean): Promise<User> {\n    const result = await db.update(users)\n      .set({ ministerio, isLider })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Questions\n  async getQuestionsByLessonId(lessonId: number): Promise<Question[]> {\n    return await db.select().from(questions)\n      .where(eq(questions.lessonId, lessonId))\n      .orderBy(questions.ordem);\n  }\n\n  async createQuestion(data: InsertQuestion): Promise<Question> {\n    const result = await db.insert(questions).values(data).returning();\n    return result[0];\n  }\n\n  async deleteQuestion(id: number): Promise<void> {\n    await db.delete(questions).where(eq(questions.id, id));\n  }\n\n  async deleteQuestionsByLessonId(lessonId: number): Promise<void> {\n    await db.delete(questions).where(eq(questions.lessonId, lessonId));\n  }\n\n  // Lesson Completions\n  async getLessonCompletion(userId: number, lessonId: number): Promise<LessonCompletion | null> {\n    const result = await db.select().from(lessonCompletions)\n      .where(and(\n        eq(lessonCompletions.userId, userId),\n        eq(lessonCompletions.lessonId, lessonId)\n      ))\n      .limit(1);\n    return result[0] || null;\n  }\n\n  async createOrUpdateLessonCompletion(userId: number, lessonId: number, score: number, completed: boolean): Promise<LessonCompletion> {\n    const existing = await this.getLessonCompletion(userId, lessonId);\n    \n    if (existing) {\n      const result = await db.update(lessonCompletions)\n        .set({\n          score,\n          completed,\n          tentativas: existing.tentativas + 1,\n          completedAt: completed ? new Date() : null,\n        })\n        .where(eq(lessonCompletions.id, existing.id))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(lessonCompletions)\n        .values({\n          userId,\n          lessonId,\n          score,\n          completed,\n          completedAt: completed ? new Date() : null,\n        })\n        .returning();\n      return result[0];\n    }\n  }\n\n  async getCourseProgress(userId: number, courseId: number): Promise<{ totalLessons: number, completedLessons: number, progress: number }> {\n    const courseLessons = await this.getLessonsByCourseId(courseId);\n    const totalLessons = courseLessons.length;\n\n    if (totalLessons === 0) {\n      return { totalLessons: 0, completedLessons: 0, progress: 0 };\n    }\n\n    const completions = await db.select()\n      .from(lessonCompletions)\n      .where(and(\n        eq(lessonCompletions.userId, userId),\n        eq(lessonCompletions.completed, true)\n      ));\n\n    const completedLessonIds = new Set(completions.map(c => c.lessonId));\n    const completedLessons = courseLessons.filter(l => completedLessonIds.has(l.id)).length;\n    const progress = Math.round((completedLessons / totalLessons) * 100);\n\n    return { totalLessons, completedLessons, progress };\n  }\n\n  async getAllUsersProgress(courseId: number): Promise<{ userId: number; userName: string; progress: number; completedLessons: number }[]> {\n    const courseLessons = await this.getLessonsByCourseId(courseId);\n    const totalLessons = courseLessons.length;\n\n    if (totalLessons === 0) {\n      return [];\n    }\n\n    const allUsers = await this.getAllUsers();\n    const lessonIds = courseLessons.map(l => l.id);\n\n    const results = await Promise.all(\n      allUsers.map(async (user) => {\n        const completions = await db.select()\n          .from(lessonCompletions)\n          .where(and(\n            eq(lessonCompletions.userId, user.id),\n            eq(lessonCompletions.completed, true)\n          ));\n\n        const completedLessonIds = new Set(completions.map(c => c.lessonId));\n        const completedLessons = lessonIds.filter(id => completedLessonIds.has(id)).length;\n        const progress = Math.round((completedLessons / totalLessons) * 100);\n\n        return {\n          userId: user.id,\n          userName: user.nome,\n          progress,\n          completedLessons,\n        };\n      })\n    );\n\n    return results.filter(r => r.completedLessons > 0); // Only return users with progress\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":17393},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/member-prayers-backup.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertPrayerRequestSchema, type InsertPrayerRequest, type PrayerRequest } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Send, Heart } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function PrayersPage() {\n  const { toast } = useToast();\n\n  const form = useForm<InsertPrayerRequest>({\n    resolver: zodResolver(insertPrayerRequestSchema),\n    defaultValues: {\n      nome: \"\",\n      email: \"\",\n      pedido: \"\",\n    },\n  });\n\n  const { data: publicPrayers = [], isLoading } = useQuery<PrayerRequest[]>({\n    queryKey: [\"/api/prayers/public\"],\n  });\n\n  const submitPrayerMutation = useMutation({\n    mutationFn: async (data: InsertPrayerRequest) => {\n      return await apiRequest<PrayerRequest>(\"POST\", \"/api/prayers\", data);\n    },\n    onSuccess: () => {\n      form.reset();\n      toast({\n        title: \"Pedido enviado!\",\n        description: \"Seu pedido de oração foi recebido e será analisado.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao enviar\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertPrayerRequest) => {\n    submitPrayerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-primary text-primary-foreground py-20\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center\">\n            <h1 className=\"font-sans text-5xl font-bold mb-4\">Pedidos de Oração</h1>\n            <p className=\"text-xl opacity-90\">\n              Compartilhe seus pedidos de oração conosco\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-12\">\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Prayer Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Send className=\"w-5 h-5\" />\n                Enviar Pedido de Oração\n              </CardTitle>\n              <CardDescription>\n                Preencha o formulário abaixo para enviar seu pedido\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"nome\">Nome*</Label>\n                  <Input\n                    id=\"nome\"\n                    placeholder=\"Seu nome\"\n                    {...form.register(\"nome\")}\n                    data-testid=\"input-prayer-name\"\n                  />\n                  {form.formState.errors.nome && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.nome.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email (opcional)</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"seu@email.com\"\n                    {...form.register(\"email\")}\n                    data-testid=\"input-prayer-email\"\n                  />\n                  {form.formState.errors.email && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"pedido\">Pedido de Oração*</Label>\n                  <Textarea\n                    id=\"pedido\"\n                    placeholder=\"Compartilhe seu pedido de oração...\"\n                    rows={6}\n                    {...form.register(\"pedido\")}\n                    data-testid=\"input-prayer-request\"\n                  />\n                  {form.formState.errors.pedido && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.pedido.message}</p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={submitPrayerMutation.isPending}\n                  data-testid=\"button-submit-prayer\"\n                >\n                  {submitPrayerMutation.isPending ? \"Enviando...\" : \"Enviar Pedido\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Public Prayers List */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"w-5 h-5 text-accent\" />\n                  Orações em Destaque\n                </CardTitle>\n                <CardDescription>\n                  Pedidos que a comunidade está acompanhando\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {isLoading ? (\n                  <p className=\"text-muted-foreground text-center py-8\">Carregando...</p>\n                ) : publicPrayers.length > 0 ? (\n                  publicPrayers.map((prayer) => (\n                    <Card key={prayer.id} className=\"bg-muted/50\" data-testid={`prayer-card-${prayer.id}`}>\n                      <CardHeader className=\"space-y-1 pb-2\">\n                        <CardTitle className=\"text-base\">{prayer.nome}</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {format(new Date(prayer.createdAt), \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR })}\n                        </p>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm\">{prayer.pedido}</p>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">\n                    Nenhum pedido público no momento\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6759},"client/src/pages/member-prayers.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertPrayerRequestSchema, type InsertPrayerRequest, type PrayerRequest } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Send, Heart } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function MemberPrayersPage() {\n  const { toast } = useToast();\n  const userStr = localStorage.getItem(\"user\");\n  const user = userStr ? JSON.parse(userStr) : null;\n\n  const form = useForm<InsertPrayerRequest>({\n    resolver: zodResolver(insertPrayerRequestSchema),\n    defaultValues: {\n      nome: user?.nome || \"\",\n      email: user?.email || \"\",\n      pedido: \"\",\n    },\n  });\n\n  const { data: publicPrayers = [], isLoading } = useQuery<PrayerRequest[]>({\n    queryKey: [\"/api/prayers/public\"],\n  });\n\n  const submitPrayerMutation = useMutation({\n    mutationFn: async (data: InsertPrayerRequest) => {\n      return await apiRequest<PrayerRequest>(\"POST\", \"/api/prayers\", data);\n    },\n    onSuccess: () => {\n      form.setValue(\"pedido\", \"\");\n      toast({\n        title: \"Pedido enviado!\",\n        description: \"Seu pedido de oração foi recebido e será analisado.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao enviar\",\n        description: error.message || \"Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertPrayerRequest) => {\n    submitPrayerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div>\n        <h1 className=\"font-sans text-4xl font-semibold mb-2\" data-testid=\"text-prayers-title\">\n          Pedidos de Oração\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Compartilhe seus pedidos de oração e acompanhe as orações da comunidade\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Prayer Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Send className=\"w-5 h-5\" />\n              Enviar Pedido de Oração\n            </CardTitle>\n            <CardDescription>\n              Preencha o formulário abaixo para enviar seu pedido\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nome\">Nome*</Label>\n                <Input\n                  id=\"nome\"\n                  placeholder=\"Seu nome\"\n                  {...form.register(\"nome\")}\n                  data-testid=\"input-prayer-name\"\n                />\n                {form.formState.errors.nome && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.nome.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email (opcional)</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"seu@email.com\"\n                  {...form.register(\"email\")}\n                  data-testid=\"input-prayer-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"pedido\">Pedido de Oração*</Label>\n                <Textarea\n                  id=\"pedido\"\n                  placeholder=\"Compartilhe seu pedido de oração...\"\n                  rows={6}\n                  {...form.register(\"pedido\")}\n                  data-testid=\"input-prayer-request\"\n                />\n                {form.formState.errors.pedido && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.pedido.message}</p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={submitPrayerMutation.isPending}\n                data-testid=\"button-submit-prayer\"\n              >\n                {submitPrayerMutation.isPending ? \"Enviando...\" : \"Enviar Pedido\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Public Prayers List */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Heart className=\"w-5 h-5 text-accent\" />\n                Orações em Destaque\n              </CardTitle>\n              <CardDescription>\n                Pedidos que a comunidade está acompanhando\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {isLoading ? (\n                <p className=\"text-muted-foreground text-center py-8\">Carregando...</p>\n              ) : publicPrayers.length > 0 ? (\n                <div className=\"space-y-4 max-h-[600px] overflow-y-auto\">\n                  {publicPrayers.map((prayer) => (\n                    <Card key={prayer.id} className=\"bg-muted/50\" data-testid={`prayer-card-${prayer.id}`}>\n                      <CardHeader className=\"space-y-1 pb-2\">\n                        <CardTitle className=\"text-base\">{prayer.nome}</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {format(new Date(prayer.createdAt), \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR })}\n                        </p>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm\">{prayer.pedido}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-muted-foreground text-center py-8\">\n                  Nenhum pedido público no momento\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6650}},"version":2}